#!/usr/bin/env python3
"""
LLM –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional
from config.llm_config import LLMProvider, llm_config_manager
from llm_providers.provider_factory import LLMProviderFactory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class LLMClient:
    """LLM –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, provider: Optional[LLMProvider] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LLM –∫–ª–∏–µ–Ω—Ç
        
        Args:
            provider: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        self.provider = provider or llm_config_manager.get_default_provider()
        self.llm_provider = None
        self._initialize_provider()
    
    def _initialize_provider(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
            available_providers = llm_config_manager.get_available_providers()
            if self.provider not in available_providers:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä {self.provider.value} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã–µ: {[p.value for p in available_providers]}")
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                if available_providers:
                    self.provider = available_providers[0]
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider.value}")
                else:
                    raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
            
            self.llm_provider = LLMProviderFactory.create_provider(self.provider)
            logger.info(f"‚úÖ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä {self.provider.value} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {self.provider.value}: {e}")
            # Fallback –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                self.provider = llm_config_manager.get_default_provider()
                available_providers = llm_config_manager.get_available_providers()
                if self.provider in available_providers:
                    self.llm_provider = LLMProviderFactory.create_provider(self.provider)
                    logger.info(f"‚úÖ Fallback –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É {self.provider.value}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                    if available_providers:
                        self.provider = available_providers[0]
                        self.llm_provider = LLMProviderFactory.create_provider(self.provider)
                        logger.info(f"‚úÖ Fallback –∫ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É {self.provider.value}")
                    else:
                        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
            except Exception as fallback_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {fallback_error}")
                self.llm_provider = None
    
    def switch_provider(self, provider: LLMProvider):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        try:
            self.provider = provider
            self.llm_provider = LLMProviderFactory.create_provider(provider)
            logger.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider.value}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider.value}: {e}")
            raise
    
    def get_available_providers(self) -> List[LLMProvider]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return LLMProviderFactory.get_available_providers()
    
    def get_current_provider(self) -> LLMProvider:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        return self.provider
    
    def _get_fallback_response(self, message: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
    
    async def generate_response(self, message: str, context: Optional[Dict[str, Any]] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not self.llm_provider:
            return self._get_fallback_response(message)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
            messages = self._format_messages(message, context)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.llm_provider.generate_response(messages)
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(message)
    
    async def process_with_tools(self, tools_context: Dict[str, Any]) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            tools_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.llm_provider:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        try:
            available_tools = tools_context.get('available_tools', [])
            user_message = tools_context.get('user_message', '')
            user_context = tools_context.get('user_context', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
            messages = self._format_messages_with_tools(user_message, available_tools, user_context)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            response = await self.llm_provider.generate_with_tools(user_message, messages, available_tools)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if response.get('action') == 'call_tool':
                # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MCP –∫–ª–∏–µ–Ω—Ç
                from mcp_client import mcp_client
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä—ã
                tool_result = await mcp_client.call_tool(
                    response['server'],
                    response['tool'],
                    response['arguments']
                )
                
                # –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
                if 'error' in tool_result and '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' in tool_result['error']:
                    tool_result = await mcp_client.call_tool_builtin(
                        response['server'],
                        response['tool'],
                        response['arguments']
                    )
                
                return self._format_tool_result(tool_result, response)
            else:
                return response.get('message', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    def _format_messages(self, message: str, context: Optional[Dict[str, Any]] = None) -> List[Dict[str, str]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM"""
        messages = []
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        system_prompt = """
–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è Jira, Atlassian, GitLab –∏ LDAP.

–í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.

–¢–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ Jira (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø–æ–∏—Å–∫, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ GitLab (—Å–ø–∏—Å–æ–∫, –∫–æ–º–º–∏—Ç—ã, merge requests)
- –†–∞–±–æ—Ç–∞ —Å Confluence (–ø–æ–∏—Å–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü)
- –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ LDAP/Active Directory

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
–ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if context:
            context_info = self._format_context_for_prompt(context)
            if context_info:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞:\n{context_info}"
        
        messages.append({"role": "system", "content": system_prompt})
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": message})
        
        return messages
    
    def _format_messages_with_tools(self, message: str, tools: List[Dict[str, Any]], context: Dict[str, Any]) -> List[Dict[str, str]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è LLM"""
        messages = []
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        system_prompt = """
–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏.
–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Jira, GitLab, Confluence –∏ LDAP.

–í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if context:
            context_info = self._format_context_for_prompt(context)
            if context_info:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞:\n{context_info}"
        
        messages.append({"role": "system", "content": system_prompt})
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": message})
        
        return messages
    
    def _format_context_for_prompt(self, context: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        context_parts = []
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if context.get('user'):
            user_info = context['user']
            if user_info.get('username'):
                context_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']}")
            if user_info.get('display_name'):
                context_parts.append(f"–ò–º—è: {user_info['display_name']}")
            if user_info.get('email'):
                context_parts.append(f"Email: {user_info['email']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        if context.get('session'):
            session_info = context['session']
            if session_info.get('session_id'):
                context_parts.append(f"ID —Å–µ—Å—Å–∏–∏: {session_info['session_id']}")
            if session_info.get('created_at'):
                context_parts.append(f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_info['created_at']}")
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if context.get('chat_history'):
            history = context['chat_history']
            if isinstance(history, list) and len(history) > 0:
                context_parts.append("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:")
                for msg in history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if isinstance(msg, dict):
                        role = msg.get('role', 'unknown')
                        content = msg.get('content', '')
                        context_parts.append(f"  {role}: {content[:100]}...")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if context.get('additional_data'):
            additional = context['additional_data']
            for key, value in additional.items():
                if isinstance(value, (str, int, float)):
                    context_parts.append(f"{key}: {value}")
        
        return "\n".join(context_parts) if context_parts else ""
    
    def _format_tool_result(self, tool_result: Dict[str, Any], original_response: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª—é–±—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
        if 'error' in tool_result:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {original_response.get('tool', 'unknown')}: {tool_result['error']}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tool_name = original_response.get('tool', 'unknown')
        server_name = original_response.get('server', 'unknown')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        return self._format_any_data(tool_result, tool_name, server_name)
    
    def _format_any_data(self, data: Any, tool_name: str = "unknown", server_name: str = "unknown", indent: int = 0) -> str:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
        indent_str = "  " * indent
        
        if data is None:
            return f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—É—Å—Ç–æ"
        
        if isinstance(data, bool):
            return f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –î–∞' if data else '‚ùå –ù–µ—Ç'}"
        
        if isinstance(data, (str, int, float)):
            return f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {data}"
        
        if isinstance(data, list):
            if len(data) == 0:
                return f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
            context_emoji = self._get_context_emoji(tool_name, server_name)
            result_text = f"{indent_str}{context_emoji} –ù–∞–π–¥–µ–Ω–æ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            max_items = 15
            for i, item in enumerate(data[:max_items], 1):
                if isinstance(item, dict):
                    # –î–ª—è —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                    key_fields = self._extract_key_fields(item, tool_name)
                    if key_fields:
                        result_text += f"{indent_str}  {i}. {key_fields}\n"
                    else:
                        result_text += f"{indent_str}  {i}. {self._format_any_data(item, tool_name, server_name, indent + 2)}\n"
                elif isinstance(item, (str, int, float)):
                    result_text += f"{indent_str}  {i}. {item}\n"
                else:
                    result_text += f"{indent_str}  {i}. {self._format_any_data(item, tool_name, server_name, indent + 2)}\n"
            
            if len(data) > max_items:
                result_text += f"{indent_str}  ... –∏ –µ—â–µ {len(data) - max_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
            
            return result_text
        
        if isinstance(data, dict):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–æ–≤–∞—Ä—è
            context_emoji = self._get_context_emoji(tool_name, server_name)
            result_text = f"{indent_str}{context_emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            sorted_keys = self._sort_dict_keys(data)
            
            for key in sorted_keys:
                value = data[key]
                formatted_key = self._format_key_name(key)
                
                if isinstance(value, (str, int, float, bool)) or value is None:
                    formatted_value = self._format_simple_value(value)
                    result_text += f"{indent_str}  {formatted_key}: {formatted_value}\n"
                elif isinstance(value, list):
                    if len(value) == 0:
                        result_text += f"{indent_str}  {formatted_key}: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫\n"
                    elif len(value) <= 3 and all(isinstance(item, (str, int, float)) for item in value):
                        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–ø–∏—Å–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                        formatted_values = [self._format_simple_value(item) for item in value]
                        result_text += f"{indent_str}  {formatted_key}: {', '.join(formatted_values)}\n"
                    else:
                        result_text += f"{indent_str}  {formatted_key}:\n"
                        result_text += self._format_any_data(value, tool_name, server_name, indent + 2)
                elif isinstance(value, dict):
                    result_text += f"{indent_str}  {formatted_key}:\n"
                    result_text += self._format_any_data(value, tool_name, server_name, indent + 2)
                else:
                    result_text += f"{indent_str}  {formatted_key}: {self._format_any_data(value, tool_name, server_name, indent + 2)}\n"
            
            return result_text
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        return f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(data)}"
    
    def _get_context_emoji(self, tool_name: str, server_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        tool_lower = tool_name.lower()
        server_lower = server_name.lower()
        
        if 'project' in tool_lower:
            return "üìÅ"
        elif 'commit' in tool_lower:
            return "üíæ"
        elif 'issue' in tool_lower or 'task' in tool_lower:
            return "üé´"
        elif 'user' in tool_lower or 'search' in tool_lower:
            return "üë§"
        elif 'page' in tool_lower or 'document' in tool_lower:
            return "üìÑ"
        elif 'merge' in tool_lower or 'branch' in tool_lower:
            return "üåø"
        elif 'gitlab' in server_lower:
            return "ü¶ä"
        elif 'jira' in server_lower:
            return "üéØ"
        elif 'confluence' in server_lower or 'atlassian' in server_lower:
            return "üìö"
        elif 'ldap' in server_lower:
            return "üîê"
        else:
            return "üìã"
    
    def _extract_key_fields(self, item: dict, tool_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tool_lower = tool_name.lower()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        priority_fields = {
            'project': ['name', 'id', 'description', 'web_url'],
            'commit': ['id', 'title', 'author_name', 'created_at'],
            'issue': ['key', 'summary', 'status', 'assignee'],
            'user': ['name', 'email', 'username', 'displayName'],
            'page': ['title', 'id', 'space', 'url'],
            'branch': ['name', 'commit', 'protected']
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–ª—è
        for key, fields in priority_fields.items():
            if key in tool_lower:
                for field in fields:
                    if field in item:
                        value = item[field]
                        if isinstance(value, str) and len(value) > 50:
                            value = value[:47] + "..."
                        return f"{field}: {value}"
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–ª—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        for key, value in item.items():
            if isinstance(value, (str, int, float)) and value is not None:
                if isinstance(value, str) and len(value) > 50:
                    value = value[:47] + "..."
                return f"{key}: {value}"
        
        return str(item)
    
    def _sort_dict_keys(self, data: dict) -> list:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
        priority_keys = ['id', 'name', 'title', 'key', 'status', 'description', 'url', 'web_url', 'created_at', 'updated_at']
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        sorted_keys = []
        for key in priority_keys:
            if key in data:
                sorted_keys.append(key)
        
        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        other_keys = sorted([k for k in data.keys() if k not in priority_keys])
        sorted_keys.extend(other_keys)
        
        return sorted_keys
    
    def _format_key_name(self, key: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        formatted = key.replace('_', ' ').replace('-', ' ')
        return formatted.title()
    
    def _format_simple_value(self, value: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if value is None:
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        elif isinstance(value, bool):
            return "‚úÖ –î–∞" if value else "‚ùå –ù–µ—Ç"
        elif isinstance(value, str):
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if len(value) > 100:
                return value[:97] + "..."
            return value
        else:
            return str(value)
    
    def _get_fallback_response(self, message: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['jira', '–¥–∂–∏—Ä–∞', '–∑–∞–¥–∞—á–∞', '—Ç–∏–∫–µ—Ç']):
            return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Jira –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        elif any(word in message_lower for word in ['gitlab', '–≥–∏—Ç–ª–∞–±', 'git', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', '–∫–æ–º–º–∏—Ç']):
            return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å GitLab –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        elif any(word in message_lower for word in ['confluence', '–∫–æ–Ω—Ñ–ª—é–µ–Ω—Å', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–¥–æ–∫—É–º–µ–Ω—Ç']):
            return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Confluence –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        elif any(word in message_lower for word in ['ldap', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∞–¥', 'active directory']):
            return "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ LDAP –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏."
    
    async def check_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ LLM –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.llm_provider:
            return {
                'status': 'unhealthy',
                'provider': self.provider.value if self.provider else 'none',
                'error': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            }
        
        try:
            health = await self.llm_provider.check_health()
            return health
        except Exception as e:
            return {
                'status': 'unhealthy',
                'provider': self.provider.value,
                'error': str(e)
            }
    
    def get_provider_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ"""
        if not self.llm_provider:
            return {
                'provider': self.provider.value if self.provider else 'none',
                'status': 'not_initialized'
            }
        
        config = llm_config_manager.get_config(self.provider)
        return {
            'provider': self.provider.value,
            'model': config.model if config else 'unknown',
            'status': 'initialized'
        }