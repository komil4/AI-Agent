#!/usr/bin/env python3
"""
LLM –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional
from config.llm_config import LLMProvider, llm_config_manager
from llm_providers import LLMProviderFactory

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class LLMClient:
    """LLM –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    
    def __init__(self, provider: Optional[LLMProvider] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LLM –∫–ª–∏–µ–Ω—Ç
        
        Args:
            provider: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        """
        self.provider = provider or llm_config_manager.get_default_provider()
        self.llm_provider = None
        self._initialize_provider()
    
    def _initialize_provider(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
            available_providers = llm_config_manager.get_available_providers()
            if self.provider not in available_providers:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä {self.provider.value} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã–µ: {[p.value for p in available_providers]}")
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                if available_providers:
                    self.provider = available_providers[0]
                    logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.provider.value}")
                else:
                    raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
            
            self.llm_provider = LLMProviderFactory.create_provider(self.provider)
            logger.info(f"‚úÖ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä {self.provider.value} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {self.provider.value}: {e}")
            # Fallback –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                self.provider = llm_config_manager.get_default_provider()
                available_providers = llm_config_manager.get_available_providers()
                if self.provider in available_providers:
                    self.llm_provider = LLMProviderFactory.create_provider(self.provider)
                    logger.info(f"‚úÖ Fallback –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É {self.provider.value}")
                else:
                    # –ü—Ä–æ–±—É–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                    if available_providers:
                        self.provider = available_providers[0]
                        self.llm_provider = LLMProviderFactory.create_provider(self.provider)
                        logger.info(f"‚úÖ Fallback –∫ –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É {self.provider.value}")
                    else:
                        raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
            except Exception as fallback_error:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {fallback_error}")
                self.llm_provider = None
    
    def switch_provider(self, provider: LLMProvider):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        try:
            self.provider = provider
            self.llm_provider = LLMProviderFactory.create_provider(provider)
            logger.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider.value}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä {provider.value}: {e}")
            raise
    
    def get_available_providers(self) -> List[LLMProvider]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return LLMProviderFactory.get_available_providers()
    
    def get_current_provider(self) -> LLMProvider:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        return self.provider
    
    def _get_fallback_response(self, message: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
    
    async def generate_response(self, message: str, context: Optional[Dict[str, Any]] = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not self.llm_provider:
            return self._get_fallback_response(message)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
            messages = self._format_messages(message, context)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.llm_provider.generate_response(messages)
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(message)
    
    async def process_with_tools(self, tools_context: Dict[str, Any]) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            tools_context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.llm_provider:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        try:
            available_tools = tools_context.get('available_tools', [])
            user_message = tools_context.get('user_message', '')
            user_context = tools_context.get('user_context', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM
            messages = self._format_messages_with_tools(user_message, available_tools, user_context)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
            response = await self.llm_provider.generate_with_tools(user_message, messages, available_tools)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if response.get('action') == 'call_tool':
                # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MCP –∫–ª–∏–µ–Ω—Ç
                from mcp_client import mcp_client
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä—ã
                tool_result = await mcp_client.call_tool(
                    response['server'],
                    response['tool'],
                    response['arguments']
                )
                
                # –ï—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
                if 'error' in tool_result and '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω' in tool_result['error']:
                    tool_result = await mcp_client.call_tool_builtin(
                        response['server'],
                        response['tool'],
                        response['arguments']
                    )
                
                return await self._format_tool_result(tool_result, response)
            elif response.get('action') == 'respond':
                return response.get('message', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
            else:
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON
                if isinstance(response, str):
                    json_response = self._extract_json_from_text(response, available_tools)
                    if json_response and json_response.get('action') == 'call_tool':
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON
                        return await self.process_with_tools({'user_message': user_message, 'user_context': user_context})
                    else:
                        return response
                else:
                    return response.get('message', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    def _format_messages(self, message: str, context: Optional[Dict[str, Any]] = None) -> List[Dict[str, str]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM"""
        messages = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
        enabled_services = self._get_enabled_services_info()
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        system_prompt = f"""
–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏.
{enabled_services}

–í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if context:
            context_info = self._format_context_for_prompt(context)
            if context_info:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞:\n{context_info}"
        
        messages.append({"role": "system", "content": system_prompt})
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #messages.append({"role": "user", "content": message})
        
        return messages
    
    def _format_messages_with_tools(self, message: str, tools: List[Dict[str, Any]], context: Dict[str, Any]) -> List[Dict[str, str]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è LLM"""
        messages = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
        enabled_services = self._get_enabled_services_info()
        
        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        system_prompt = f"""
–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏.
{enabled_services}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —á–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if context:
            context_info = self._format_context_for_prompt(context)
            if context_info:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞:\n{context_info}"
        
        messages.append({"role": "system", "content": system_prompt})
        
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        #messages.append({"role": "user", "content": message})
        
        return messages
    
    def _get_enabled_services_info(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        from mcp_client import mcp_client
        
        enabled_services = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        builtin_servers = mcp_client._get_builtin_servers()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
        for server_name, server in builtin_servers.items():
            try:
                if server.is_enabled():
                    description = server.get_description()
                    enabled_services.append(f"‚Ä¢ {description}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
        
        if enabled_services:
            return f"–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–∞–º:\n" + "\n".join(enabled_services)
        else:
            return "–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã."
    
    def _format_context_for_prompt(self, context: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        context_parts = []
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if context.get('user'):
            user_info = context['user']
            if user_info.get('username'):
                context_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['username']}")
            if user_info.get('display_name'):
                context_parts.append(f"–ò–º—è: {user_info['display_name']}")
            if user_info.get('email'):
                context_parts.append(f"Email: {user_info['email']}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        if context.get('session'):
            session_info = context['session']
            if session_info.get('session_id'):
                context_parts.append(f"ID —Å–µ—Å—Å–∏–∏: {session_info['session_id']}")
            if session_info.get('created_at'):
                context_parts.append(f"–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_info['created_at']}")
        
        # –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if context.get('chat_history'):
            history = context['chat_history']
            if isinstance(history, list) and len(history) > 0:
                context_parts.append("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:")
                for msg in history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if isinstance(msg, dict):
                        role = msg.get('role', 'unknown')
                        content = msg.get('content', '')
                        context_parts.append(f"  {role}: {content[:100]}...")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if context.get('additional_data'):
            additional = context['additional_data']
            for key, value in additional.items():
                if isinstance(value, (str, int, float)):
                    context_parts.append(f"{key}: {value}")
        
        return "\n".join(context_parts) if context_parts else ""
    
    def _extract_json_from_text(self, text: str, available_tools: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ Llama2"""
        try:
            import re
            import json
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
            cleaned_text = text.strip()
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
            if cleaned_text.startswith('```json'):
                cleaned_text = cleaned_text[7:]
            if cleaned_text.endswith('```'):
                cleaned_text = cleaned_text[:-3]
            cleaned_text = cleaned_text.strip()
            
            # –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç
            json_match = re.search(r'\{[^{}]*\}', cleaned_text)
            if json_match:
                json_text = json_match.group()
                parsed = json.loads(json_text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
                if 'action' in parsed or 'tool' in parsed:
                    if 'action' not in parsed:
                        parsed['action'] = 'call_tool'
                    return parsed
            
            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if any(keyword in text.lower() for keyword in ['—Å–æ–∑–¥–∞–π', '–Ω–∞–π–¥–∏', '–ø–æ–∫–∞–∂–∏', '–ø–æ–ª—É—á–∏', '–æ–±–Ω–æ–≤–∏', '—É–¥–∞–ª–∏']):
                tool_name = self._extract_tool_name_from_text(text, available_tools)
                if tool_name:
                    return {
                        'action': 'call_tool',
                        'server': 'unknown',
                        'tool': tool_name,
                        'arguments': {}
                    }
            
            return None
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def _extract_tool_name_from_text(self, text: str, available_tools: List[Dict[str, Any]]) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
        tool_keywords = {
            'create_issue': ['—Å–æ–∑–¥–∞–π –∑–∞–¥–∞—á—É', '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞', '—Å–æ–∑–¥–∞—Ç—å issue'],
            'search_issues': ['–Ω–∞–π–¥–∏ –∑–∞–¥–∞—á–∏', '–ø–æ–∏—Å–∫ –∑–∞–¥–∞—á', '–Ω–∞–π—Ç–∏ issue', '–ø–æ–∏—Å–∫ issue'],
            'list_issues': ['–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏', '—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', '–≤—Å–µ –∑–∞–¥–∞—á–∏', '–ø–æ–∫–∞–∑–∞—Ç—å issue'],
            'update_issue': ['–æ–±–Ω–æ–≤–∏ –∑–∞–¥–∞—á—É', '–∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', '–æ–±–Ω–æ–≤–∏—Ç—å issue', '–∏–∑–º–µ–Ω–∏—Ç—å issue'],
            'create_project': ['—Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç', '—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', '–Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'],
            'list_projects': ['–ø–æ–∫–∞–∂–∏ –ø—Ä–æ–µ–∫—Ç—ã', '—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤', '–≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã'],
            'create_merge_request': ['—Å–æ–∑–¥–∞–π merge request', '—Å–æ–∑–¥–∞—Ç—å merge request', '–Ω–æ–≤—ã–π merge request'],
            'list_commits': ['–ø–æ–∫–∞–∂–∏ –∫–æ–º–º–∏—Ç—ã', '—Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤', '–≤—Å–µ –∫–æ–º–º–∏—Ç—ã', '–∏—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–∏—Ç–æ–≤']
        }
        
        for tool_name, keywords in tool_keywords.items():
            if any(keyword in text_lower for keyword in keywords):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
                for tool in available_tools:
                    if tool['name'] == tool_name:
                        return tool_name
        
        return None
    
    async def _format_tool_result(self, tool_result: Dict[str, Any], original_response: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å –≥–∏–±–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª—é–±—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
        if 'error' in tool_result:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {original_response.get('tool', 'unknown')}: {tool_result['error']}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tool_name = original_response.get('tool', 'unknown')
        server_name = original_response.get('server', 'unknown')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        return await self._format_any_data(tool_result, tool_name, server_name)
    
    async def _format_any_data(self, data: Any, tool_name: str = "unknown", server_name: str = "unknown", indent: int = 0, _llm_top_level: bool = True) -> str:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç.
        –í –∫–æ–Ω—Ü–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç LLM –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        """
        indent_str = "  " * indent

        # –í–ª–æ–∂–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –±–µ–∑ LLM beautify –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
        async def _format(data, tool_name, server_name, indent, _llm_top_level):
            indent_str = "  " * indent

            if data is None:
                result_text = f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—É—Å—Ç–æ"
            elif isinstance(data, bool):
                result_text = f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –î–∞' if data else '‚ùå –ù–µ—Ç'}"
            elif isinstance(data, (str, int, float)):
                result_text = f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {data}"
            elif isinstance(data, list):
                if len(data) == 0:
                    result_text = f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"
                else:
                    context_emoji = self._get_context_emoji(tool_name, server_name)
                    result_text = f"{indent_str}{context_emoji} –ù–∞–π–¥–µ–Ω–æ {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤:\n"
                    max_items = 15
                    for i, item in enumerate(data[:max_items], 1):
                        if isinstance(item, dict):
                            key_fields_list = self._extract_key_fields(item, tool_name)
                            if key_fields_list:
                                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π, –≤—ã–≤–æ–¥–∏–º –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                                if isinstance(key_fields_list, (list, tuple)):
                                    key_fields_str = ", ".join(str(f) for f in key_fields_list if f)
                                else:
                                    key_fields_str = str(key_fields_list)
                                result_text += f"{indent_str}  {i}. {key_fields_str}\n"
                            else:
                                formatted = await _format(item, tool_name, server_name, indent + 2, False)
                                result_text += f"{indent_str}  {i}. {formatted}\n"
                        elif isinstance(item, (str, int, float)):
                            result_text += f"{indent_str}  {i}. {item}\n"
                        else:
                            formatted = await _format(item, tool_name, server_name, indent + 2, False)
                            result_text += f"{indent_str}  {i}. {formatted}\n"
                    if len(data) > max_items:
                        result_text += f"{indent_str}  ... –∏ –µ—â–µ {len(data) - max_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n"
            elif isinstance(data, dict):
                context_emoji = self._get_context_emoji(tool_name, server_name)
                result_text = f"{indent_str}{context_emoji} –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                sorted_keys = self._sort_dict_keys(data)
                for key in sorted_keys:
                    value = data[key]
                    formatted_key = self._format_key_name(key)
                    if isinstance(value, (str, int, float, bool)) or value is None:
                        formatted_value = self._format_simple_value(value)
                        result_text += f"{indent_str}  {formatted_key}: {formatted_value}\n"
                    elif isinstance(value, list):
                        if len(value) == 0:
                            result_text += f"{indent_str}  {formatted_key}: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫\n"
                        elif len(value) <= 3 and all(isinstance(item, (str, int, float)) for item in value):
                            formatted_values = [self._format_simple_value(item) for item in value]
                            result_text += f"{indent_str}  {formatted_key}: {', '.join(formatted_values)}\n"
                        else:
                            result_text += f"{indent_str}  {formatted_key}:\n"
                            formatted = await _format(value, tool_name, server_name, indent + 2, False)
                            result_text += formatted
                    elif isinstance(value, dict):
                        result_text += f"{indent_str}  {formatted_key}:\n"
                        formatted = await _format(value, tool_name, server_name, indent + 2, False)
                        result_text += formatted
                    else:
                        formatted = await _format(value, tool_name, server_name, indent + 2, False)
                        result_text += f"{indent_str}  {formatted_key}: {formatted}\n"
            else:
                result_text = f"{indent_str}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(data)}"
            return result_text

        # –¢–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –≤—ã–∑—ã–≤–∞–µ–º LLM beautify
        result_text = await _format(data, tool_name, server_name, indent, _llm_top_level)
        if _llm_top_level:
            try:
                from llm_providers.provider_factory import LLMProviderFactory
                llm = LLMProviderFactory.create_default_provider()
                prompt = (
                    "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, "
                    "–∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
                    "- **–ó–∞–≥–æ–ª–æ–≤–∫–∏** –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏\n"
                    "- **–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ** –∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏\n"
                    "- –≠–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤\n"
                    "- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (--- –∏–ª–∏ ***)\n"
                    "- **–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç** –¥–ª—è –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤\n\n"
                    "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏–π –æ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ, –Ω–µ –æ–±—ä—è—Å–Ω—è–π, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. "
                    "–ü—Ä–æ—Å—Ç–æ –≤—ã–¥–∞–π –≥–æ—Ç–æ–≤—ã–π, –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )

                result_text = (
                    "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—Ä–∞—Å–∏–≤—ã–π –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥.\n\n"
                    + str(result_text)
                )

                # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
                beautified = await llm.generate_response([
                    {"role": "system", "content": prompt},
                    {"role": "user", "content": str(result_text)}
                ], temperature = 0.7)

                # –ï—Å–ª–∏ beautified —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫ <think>...</think>, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                import re
                beautified = re.sub(r'<think>.*?</think>', '', beautified, flags=re.DOTALL | re.IGNORECASE).strip()


                print(f"üîç LLM beautify: {beautified}")
                if beautified and isinstance(beautified, str) and len(beautified) > 0:
                    return beautified
            except Exception as e:
                import logging
                logging.getLogger("llm_client").warning(f"LLM beautify failed: {e}")

        return result_text
    
    def _get_context_emoji(self, tool_name: str, server_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        tool_lower = tool_name.lower()
        server_lower = server_name.lower()
        
        if 'project' in tool_lower:
            return "üìÅ"
        elif 'commit' in tool_lower:
            return "üíæ"
        elif 'issue' in tool_lower or 'task' in tool_lower:
            return "üé´"
        elif 'user' in tool_lower or 'search' in tool_lower:
            return "üë§"
        elif 'page' in tool_lower or 'document' in tool_lower:
            return "üìÑ"
        elif 'merge' in tool_lower or 'branch' in tool_lower:
            return "üåø"
        elif 'gitlab' in server_lower:
            return "ü¶ä"
        elif 'jira' in server_lower:
            return "üéØ"
        elif 'confluence' in server_lower or 'atlassian' in server_lower:
            return "üìö"
        elif 'ldap' in server_lower:
            return "üîê"
        else:
            return "üìã"
    
    def _extract_key_fields(self, item: dict, tool_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tool_lower = tool_name.lower()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        priority_fields = {
            'project': ['name', 'id', 'description', 'web_url', 'path'],
            'commit': ['id', 'title', 'author_name', 'created_at', 'message'],
            'issue': ['key', 'summary', 'status', 'assignee', 'priority', 'type'],
            'user': ['display_name', 'email', 'title', 'phone', 'department'],
            'page': ['title', 'id', 'space', 'url', 'type'],
            'branch': ['name', 'commit', 'protected', 'default'],
            'search': ['name', 'email', 'username', 'displayName', 'department', 'title', 'cn'],
            'list': ['name', 'email', 'username', 'displayName', 'department', 'title', 'cn']
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–ª—è –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö –≤—Å–µ
        found_fields = []
        for key, fields in priority_fields.items():
            if key in tool_lower:
                for field in fields:
                    if field in item:
                        value = item[field]
                        if isinstance(value, str) and len(value) > 50:
                            value = value[:47] + "..."
                        found_fields.append(f"{field}: {value}")
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
                if found_fields:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    if tool_lower in ['user', 'search', 'list']:
                        max_fields = 5  # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–µ –ø–æ–ª–µ–π
                    elif tool_lower in ['issue', 'commit']:
                        max_fields = 4  # –î–ª—è –∑–∞–¥–∞—á –∏ –∫–æ–º–º–∏—Ç–æ–≤
                    else:
                        max_fields = len(found_fields)  # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                    return ", ".join(found_fields[:max_fields])
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–ª—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        for key, value in item.items():
            if isinstance(value, (str, int, float)) and value is not None:
                if isinstance(value, str) and len(value) > 50:
                    value = value[:47] + "..."
                return f"{key}: {value}"
        
        return str(item)
    
    def _sort_dict_keys(self, data: dict) -> list:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
        priority_keys = ['id', 'name', 'title', 'key', 'status', 'description', 'url', 'web_url', 'created_at', 'updated_at']
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        sorted_keys = []
        for key in priority_keys:
            if key in data:
                sorted_keys.append(key)
        
        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        other_keys = sorted([k for k in data.keys() if k not in priority_keys])
        sorted_keys.extend(other_keys)
        
        return sorted_keys
    
    def _format_key_name(self, key: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
        formatted = key.replace('_', ' ').replace('-', ' ')
        return formatted.title()
    
    def _format_simple_value(self, value: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if value is None:
            return "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        elif isinstance(value, bool):
            return "‚úÖ –î–∞" if value else "‚ùå –ù–µ—Ç"
        elif isinstance(value, str):
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if len(value) > 100:
                return value[:97] + "..."
            return value
        else:
            return str(value)
    
    def _get_fallback_response(self, message: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        message_lower = message.lower()
        
        if any(word in message_lower for word in ['jira', '–¥–∂–∏—Ä–∞', '–∑–∞–¥–∞—á–∞', '—Ç–∏–∫–µ—Ç']):
            return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Jira –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        elif any(word in message_lower for word in ['gitlab', '–≥–∏—Ç–ª–∞–±', 'git', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', '–∫–æ–º–º–∏—Ç']):
            return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å GitLab –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        elif any(word in message_lower for word in ['confluence', '–∫–æ–Ω—Ñ–ª—é–µ–Ω—Å', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–¥–æ–∫—É–º–µ–Ω—Ç']):
            return "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Confluence –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        elif any(word in message_lower for word in ['ldap', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–∞–¥', 'active directory']):
            return "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ LDAP –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä. LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏."
    
    async def check_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ LLM –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.llm_provider:
            return {
                'status': 'unhealthy',
                'provider': self.provider.value if self.provider else 'none',
                'error': '–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            }
        
        try:
            health = await self.llm_provider.check_health()
            return health
        except Exception as e:
            return {
                'status': 'unhealthy',
                'provider': self.provider.value,
                'error': str(e)
            }
    
    def get_provider_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ"""
        if not self.llm_provider:
            return {
                'provider': self.provider.value if self.provider else 'none',
                'status': 'not_initialized'
            }
        
        config = llm_config_manager.get_config(self.provider)
        return {
            'provider': self.provider.value,
            'model': config.model if config else 'unknown',
            'status': 'initialized'
        }