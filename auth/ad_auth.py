#!/usr/bin/env python3
"""
–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Active Directory (LDAP)
"""

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
# ============================================================================

import os
import logging
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    from ldap3 import Server, Connection, ALL, NTLM
    from ldap3.core.exceptions import LDAPException
    LDAP_AVAILABLE = True
except ImportError:
    LDAP_AVAILABLE = False
    print("‚ö†Ô∏è ldap3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Active Directory –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

try:
    import jwt
    JWT_AVAILABLE = True
except ImportError:
    JWT_AVAILABLE = False
    print("‚ö†Ô∏è PyJWT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. JWT —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

try:
    from passlib.context import CryptContext
    PASSWORD_AVAILABLE = True
    pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
except ImportError:
    PASSWORD_AVAILABLE = False
    pwd_context = None
    print("‚ö†Ô∏è passlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# pwd_context —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤—ã—à–µ –≤ –±–ª–æ–∫–µ try/except

# ============================================================================
# –ü–†–û–ì–†–ê–ú–ú–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° (API)
# ============================================================================

class ADAuthenticator:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Active Directory"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        from config.config_manager import ConfigManager
        self.config_manager = ConfigManager()
        self.ad_server = None
        self.ad_domain = None
        self.ad_base_dn = None
        self.ad_service_user = None
        self.ad_service_password = None
        self.jwt_secret = 'super-secret-key'
        self.jwt_algorithm = 'HS256'
        self.jwt_expire_hours = 24
        self._load_config()
    
    def authenticate_user(self, username: str, password: str) -> Optional[Dict[str, Any]]:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ LDAP"""
        if not LDAP_AVAILABLE:
            logger.error("‚ùå LDAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ldap3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None
        
        if not self.ad_server:
            logger.error("‚ùå LDAP —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        try:

            server = self.ad_server
            # 1. –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å sAMAccountName
            try:
                user_dn = f"CN={self.ad_service_user},{self.ad_base_dn}"
                connection = Connection(server, user=user_dn, password=self.ad_service_password)
                if connection.bind():
                    user_info = self._get_user_info(connection, username)
                    if user_info:
                        return user_info
            except Exception as e:
                logger.warning(f"DN –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            # 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å UPN (User Principal Name)
            try:
                user_dn = f"{self.ad_service_user}@{self.ad_domain}"
                connection = Connection(server, user=user_dn, password=self.ad_service_password)
                if connection.bind():
                    user_info = self._get_user_info(connection, username)
                    if user_info:
                        return user_info    
            except Exception as e:
                logger.warning(f"UPN –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            
            # 3. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å sAMAccountName
            try:
                user_dn = f"{self.ad_domain}\\{self.ad_service_user}"
                connection = Connection(server, user=user_dn, password=self.ad_service_password)
                if connection.bind():
                    user_info = self._get_user_info(connection, username)
                    if user_info:
                        return user_info 
            except Exception as e:
                logger.warning(f"sAMAccountName –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                       
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ AD: {username}")
            connection.unbind()
            return None
            
        except LDAPException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ LDAP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return None
    
    def create_access_token(self, user_info: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"""
        if not JWT_AVAILABLE:
            logger.error("‚ùå JWT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyJWT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return ""
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
            token_data = {
                'username': user_info['username'],
                'display_name': user_info.get('display_name', user_info['username']),
                'email': user_info.get('email', ''),
                'groups': user_info.get('groups', []),
                'is_admin': user_info.get('is_admin', False),
                'exp': datetime.utcnow() + timedelta(hours=self.jwt_expire_hours),
                'iat': datetime.utcnow()
            }
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
            token = jwt.encode(token_data, self.jwt_secret, algorithm=self.jwt_algorithm)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info['username']}")
            return token
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            return ""
    
    def verify_access_token(self, token: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞"""
        if not JWT_AVAILABLE:
            logger.error("‚ùå JWT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyJWT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None
        
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            payload = jwt.decode(token, self.jwt_secret, algorithms=[self.jwt_algorithm])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if datetime.utcnow() > datetime.fromtimestamp(payload['exp']):
                logger.warning("‚ùå JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
                return None
            
            logger.info(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {payload['username']}")
            return payload
            
        except jwt.ExpiredSignatureError:
            logger.warning("‚ùå JWT —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
            return None
        except jwt.InvalidTokenError as e:
            logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LDAP —Å–µ—Ä–≤–µ—Ä—É"""
        logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LDAP —Å–µ—Ä–≤–µ—Ä—É...")
        self._load_config()
        logger.info("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LDAP –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LDAP —Å–µ—Ä–≤–µ—Ä—É"""
        if not LDAP_AVAILABLE or not self.ad_server:
            return False
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            conn = Connection(self.ad_server, auto_bind=True)
            conn.unbind()
            return True
        except Exception:
            return False

# ============================================================================
# –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LDAP"""
        try:
            ad_config = self.config_manager.get_service_config('active_directory')
            
            if ad_config.get('enabled', False):
                self.ad_server = Server(
                    ad_config.get('server'),
                    get_info=ALL,
                    connect_timeout=60
                )
                self.ad_domain = ad_config.get('domain')
                self.ad_base_dn = ad_config.get('base_dn')
                self.ad_service_user = ad_config.get('service_user', '')
                self.ad_service_password = ad_config.get('service_password', '')
                
                # JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                jwt_config = ad_config.get('jwt', {})
                self.jwt_secret = jwt_config.get('secret', 'super-secret-key')
                self.jwt_algorithm = jwt_config.get('algorithm', 'HS256')
                self.jwt_expire_hours = jwt_config.get('expire_hours', 24)
                
                logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LDAP –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {ad_config.get('server')}")
            else:
                logger.info("‚ÑπÔ∏è LDAP –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LDAP: {e}")

    def _get_user_info(self, conn: Connection, username: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Active Directory
        """
        try:
            attributes=['sAMAccountName', 'displayName', 'mail', 'cn', 'givenName', 'sn', 'userPrincipalName']
            search_filter = f"(sAMAccountName={username})"
            # –ü—Ä–æ–±—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            conn.search(
                search_base=self.ad_base_dn,
                search_filter=search_filter,
                search_scope='SUBTREE',
                attributes = attributes
            )
                        
            if conn.entries:       
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—ã
                entry = conn.entries[0]
                groups = []
                if hasattr(entry, 'memberOf'):
                    for group_dn in entry.memberOf.values:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã –∏–∑ DN
                        group_name = group_dn.split(',')[0].replace('CN=', '')
                        groups.append(group_name)
                        
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                is_admin = any('admin' in group.lower() for group in groups)

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                user_data = {}
                for attr in attributes:
                    if hasattr(entry, attr):
                        value = getattr(entry, attr)
                        if isinstance(value, list) and len(value) > 0:
                            user_data[attr] = str(value[0])
                        elif value:
                            user_data[attr] = str(value)

                if conn.entries:
                    entry = conn.entries[0]
                    user_info = {
                        'username': str(user_data['sAMAccountName']),
                        'display_name': str(user_data['displayName']) if user_data['displayName'] else username,
                        'email': str(user_data['mail']) if user_data['mail'] else None,
                        'groups': groups,
                        'is_admin': is_admin
                    }
                    return user_info
                else:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Active Directory")
                    return None
            return None    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            return None

# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
ad_auth = ADAuthenticator()
