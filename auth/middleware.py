#!/usr/bin/env python3
"""
Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
# ============================================================================

from fastapi import Request, HTTPException, status
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware
from typing import Callable
import logging

from .ad_auth import ADAuthenticator
from .session_manager import SessionManager

logger = logging.getLogger(__name__)

# ============================================================================
# –ü–†–û–ì–†–ê–ú–ú–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° (API)
# ============================================================================

class AuthMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, app, excluded_paths: list = None, session_manager=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware"""
        super().__init__(app)
        self.excluded_paths = excluded_paths or [
            '/',
            '/login',
            '/logout',
            '/admin',
            '/static',
            '/docs',
            '/redoc',
            '/openapi.json',
            '/api/auth/login',
            '/api/auth/logout',
            '/api/auth/me',  # –î–æ–±–∞–≤–ª—è–µ–º /api/auth/me –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            '/api/admin/login',
            '/api/admin/info',
            '/api/admin/config',
            '/api/admin/config/update',
            '/api/admin/test-connection',
            '/api/admin/change-password',
            '/favicon.ico'
        ]
        self.ad_auth = ADAuthenticator()
        self.session_manager = session_manager  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π session_manager
    
    async def dispatch(self, request: Request, call_next: Callable):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ middleware"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if self._is_excluded_path(request.url.path):
            response = await call_next(request)
            return response
        
        # –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ cookies
        session_id = request.cookies.get('session_id')
        logger.debug(f"üç™ Session ID –∏–∑ cookies: {session_id}")
        logger.debug(f"üìã –í—Å–µ cookies: {request.cookies}")
        
        if not session_id:
            logger.warning(f"‚ùå –ù–µ—Ç session_id –¥–ª—è –ø—É—Ç–∏ {request.url.path}")
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            if request.url.path.startswith('/api/'):
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
                )
            else:
                return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
        session_data = self.session_manager.get_session(session_id)
        if not session_data:
            logger.warning(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Å—Å–∏—è {session_id} –¥–ª—è –ø—É—Ç–∏ {request.url.path}")
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            if request.url.path.startswith('/api/'):
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
                )
            else:
                return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
        access_token = session_data.get('access_token')
        if access_token:
            user_info = self.ad_auth.verify_access_token(access_token)
            if not user_info:
                logger.warning(f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
                # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
                if request.url.path.startswith('/api/'):
                    raise HTTPException(
                        status_code=status.HTTP_401_UNAUTHORIZED,
                        detail="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
                    )
                else:
                    return RedirectResponse(url="/login", status_code=status.HTTP_302_FOUND)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ request state
        request.state.user_info = session_data.get('user_info', {})
        request.state.session_id = session_id
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        response = await call_next(request)
        return response

# ============================================================================
# –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

    def _is_excluded_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ –ø—É—Ç—å –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if path in self.excluded_paths:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
        for excluded_path in self.excluded_paths:
            if path.startswith(excluded_path):
                return True
        
        return False
    
    def _is_admin_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–º"""
        return path.startswith('/admin') or path.startswith('/api/admin')
    
    def _is_api_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å API"""
        return path.startswith('/api/')
    
    def _is_static_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º"""
        return path.startswith('/static') or path.endswith('.ico') or path.endswith('.css') or path.endswith('.js')
    
    def _is_documentation_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π"""
        return path in ['/docs', '/redoc', '/openapi.json']
    
    def _is_auth_path(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–º"""
        return path.startswith('/api/auth/') or path in ['/login', '/logout']
    
    def _should_redirect_to_login(self, path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞"""
        return not (self._is_static_path(path) or 
                   self._is_documentation_path(path) or 
                   self._is_auth_path(path) or 
                   path == '/')
    
    def _should_return_401(self, path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 401 –¥–ª—è API"""
        return self._is_api_path(path) and not self._is_auth_path(path)

# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä middleware (—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
auth_middleware = None
