#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º Anthropic
"""

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
# ============================================================================

import asyncio
import logging
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
from mcp_servers.jira_server_fastmcp import JiraFastMCPServer
from mcp_servers.gitlab_server_fastmcp import GitLabFastMCPServer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ============================================================================
# –ü–†–û–ì–†–ê–ú–ú–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° (API)
# ============================================================================

class MCPExample:
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º Anthropic"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞"""
        self.jira_server = JiraFastMCPServer()
        self.gitlab_server = GitLabFastMCPServer()
    
    async def demonstrate_jira_tools(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Jira"""
        logger.info("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Jira")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.jira_server.is_enabled():
            logger.warning("‚ö†Ô∏è Jira —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        projects_result = self.jira_server.list_projects()
        if projects_result["success"]:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects_result['data'])}")
            for project in projects_result["data"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   - {project['key']}: {project['name']}")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–º–µ—Ä)
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        create_result = self.jira_server.create_issue(
            summary="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ MCP",
            project_key="TEST",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
            description="–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ Anthropic",
            issue_type="Task",
            priority="Medium"
        )
        
        if create_result["success"]:
            issue_key = create_result["data"]["issue_key"]
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {issue_key}")
            
            # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
            logger.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏...")
            details_result = self.jira_server.get_issue_details(
                issue_key=issue_key,
                include_comments=True,
                include_attachments=True
            )
            
            if details_result["success"]:
                details = details_result["data"]
                logger.info(f"‚úÖ –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
                logger.info(f"   - –°—Ç–∞—Ç—É—Å: {details['status']}")
                logger.info(f"   - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {details['priority']}")
                logger.info(f"   - –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {details['assignee']}")
                logger.info(f"   - URL: {details['url']}")
        
        # 4. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á
        logger.info("üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á...")
        search_result = self.jira_server.search_issues(
            jql="project = TEST AND status = 'To Do'",
            max_results=10,
            fields=["summary", "status", "assignee", "priority"]
        )
        
        if search_result["success"]:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {search_result['data']['total']}")
            for issue in search_result["data"]["issues"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   - {issue['key']}: {issue['summary']} ({issue['status']})")
    
    async def demonstrate_gitlab_tools(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ GitLab"""
        logger.info("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ GitLab")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.gitlab_server.is_enabled():
            logger.warning("‚ö†Ô∏è GitLab —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
            return
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        projects_result = self.gitlab_server.list_projects(
            search="",  # –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            per_page=10,
            visibility="public",
            order_by="last_activity_at"
        )
        
        if projects_result["success"]:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects_result['data'])}")
            for project in projects_result["data"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   - {project['full_path']}: {project['name']}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç—ã)
        if projects_result["success"] and projects_result["data"]:
            project_id = projects_result["data"][0]["id"]
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ {project_id}...")
            
            details_result = self.gitlab_server.get_project_details(
                project_id=str(project_id),
                include_statistics=True
            )
            
            if details_result["success"]:
                details = details_result["data"]
                logger.info(f"‚úÖ –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã:")
                logger.info(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ: {details['name']}")
                logger.info(f"   - –ü—É—Ç—å: {details['full_path']}")
                logger.info(f"   - –í–∏–¥–∏–º–æ—Å—Ç—å: {details['visibility']}")
                logger.info(f"   - URL: {details['web_url']}")
                
                if "statistics" in details and details["statistics"] != "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ":
                    stats = details["statistics"]
                    logger.info(f"   - –ö–æ–º–º–∏—Ç–æ–≤: {stats.get('commit_count', 'N/A')}")
                    logger.info(f"   - –†–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {stats.get('repository_size', 'N/A')} –±–∞–π—Ç")
        
        # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        if projects_result["success"] and projects_result["data"]:
            project_id = projects_result["data"][0]["id"]
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}...")
            
            commits_result = self.gitlab_server.get_project_commits(
                project_id=str(project_id),
                per_page=5,
                branch="main"  # –∏–ª–∏ "master"
            )
            
            if commits_result["success"]:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤: {len(commits_result['data'])}")
                for commit in commits_result["data"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    logger.info(f"   - {commit['short_id']}: {commit['title']} ({commit['author_name']})")
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ç–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        if projects_result["success"] and projects_result["data"]:
            project_id = projects_result["data"][0]["id"]
            logger.info(f"üåø –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ç–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞ {project_id}...")
            
            branches_result = self.gitlab_server.list_branches(
                project_id=str(project_id),
                per_page=10
            )
            
            if branches_result["success"]:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –≤–µ—Ç–æ–∫: {len(branches_result['data'])}")
                for branch in branches_result["data"][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    logger.info(f"   - {branch['name']} {'(default)' if branch['default'] else ''}")
    
    async def demonstrate_tool_schemas(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ö–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        logger.info("üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ö–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        
        # Jira –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        logger.info("üîß –°—Ö–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Jira:")
        for tool in self.jira_server.tools:
            logger.info(f"   - {tool['name']}: {tool['description']}")
            required = tool['inputSchema'].get('required', [])
            if required:
                logger.info(f"     –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(required)}")
        
        # GitLab –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        logger.info("üîß –°—Ö–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ GitLab:")
        for tool in self.gitlab_server.tools:
            logger.info(f"   - {tool['name']}: {tool['description']}")
            required = tool['inputSchema'].get('required', [])
            if required:
                logger.info(f"     –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(required)}")
    
    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–º Anthropic")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
        logger.info("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö:")
        logger.info(f"   - Jira: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.jira_server.is_enabled() else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"   - GitLab: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if self.gitlab_server.is_enabled() else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ö–µ–º
        await self.demonstrate_tool_schemas()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Jira
        await self.demonstrate_jira_tools()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è GitLab
        await self.demonstrate_gitlab_tools()
        
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# ============================================================================
# –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    example = MCPExample()
    await example.run_demo()

# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

if __name__ == "__main__":
    asyncio.run(main())
