import ldap3
from typing import Dict, Any, List
from config.config_manager import ConfigManager

class LDAPMCPServer:
    def __init__(self):
        self.config_manager = ConfigManager()
        self.ldap_url = None
        self.ldap_user = None
        self.ldap_password = None
        self.base_dn = None
        self.connection = None
        self._load_config()
        self._connect()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LDAP"""
        ad_config = self.config_manager.get_service_config('active_directory')
        self.ldap_url = ad_config.get('server', '')
        self.ldap_user = ad_config.get('service_user', '')
        self.ldap_password = ad_config.get('service_password', '')
        self.base_dn = ad_config.get('base_dn', '')
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LDAP"""
        try:
            ad_config = self.config_manager.get_service_config('active_directory')
            if not ad_config.get('enabled', False):
                print("‚ö†Ô∏è Active Directory –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
                
            if self.ldap_url and self.ldap_user and self.ldap_password:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LDAP
                server = ldap3.Server(self.ldap_url)
                self.connection = ldap3.Connection(
                    server, 
                    user=self.ldap_user, 
                    password=self.ldap_password,
                    auto_bind=True
                )
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LDAP —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è LDAP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LDAP: {e}")
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ LDAP —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        self._load_config()
        self._connect()
    
    def process_command(self, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è LDAP (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)"""
        if not self.connection:
            return "‚ùå LDAP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Active Directory."
        
        try:
            return self._process_command_legacy(message)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å LDAP: {str(e)}"
    
    def call_tool(self, tool_name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç LDAP –ø–æ –∏–º–µ–Ω–∏"""
        if not self.connection:
            return {"error": "LDAP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        try:
            if tool_name == "search_user":
                return self._search_user_tool(arguments)
            elif tool_name == "list_users":
                return self._list_users_tool(arguments)
            elif tool_name == "get_user_details":
                return self._get_user_details_tool(arguments)
            else:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"}
        except Exception as e:
            return {"error": str(e)}
    
    def _process_command_legacy(self, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è LDAP (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        if not self.connection:
            return "‚ùå LDAP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Active Directory."
        
        message_lower = message.lower()
        
        try:
            if any(word in message_lower for word in ['–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–Ω–∞–π–¥–∏', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫']):
                return self._search_users(message)
            elif any(word in message_lower for word in ['—Å–ø–∏—Å–æ–∫', '–≤—Å–µ', '–ø–æ–∫–∞–∑–∞—Ç—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']):
                return self._list_users()
            else:
                return self._get_help()
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å LDAP: {str(e)}"
    
    def process_command_intelligent(self, message: str, intent_result, user_context: dict = None) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è LDAP –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        if not self.connection:
            return "‚ùå LDAP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Active Directory."
        
        try:
            from intent_analyzer import IntentType
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if intent_result.intent == IntentType.LDAP_SEARCH:
                return self._search_users_intelligent(message, intent_result)
            elif intent_result.intent == IntentType.LDAP_LIST:
                return self._list_users_intelligent(message, intent_result)
            else:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                return self.process_command(message)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å LDAP: {str(e)}"
    
    def _search_users(self, message: str) -> str:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ LDAP"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            search_query = message.strip()
            
            # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
            words_to_remove = ['–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–Ω–∞–π–¥–∏', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–≤', 'ldap', 'ad']
            for word in words_to_remove:
                search_query = search_query.replace(word, '')
            
            search_query = search_query.strip()
            
            if not search_query:
                return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω–æ–≤'"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            users = self._perform_ldap_search(search_query)
            
            if not users:
                return f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            result = f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n\n"
            for user in users:
                result += f"‚Ä¢ **{user['display_name']}**\n"
                result += f"  üë§ –õ–æ–≥–∏–Ω: {user['username']}\n"
                result += f"  üìß Email: {user['email']}\n"
                result += f"  üè¢ –û—Ç–¥–µ–ª: {user['department']}\n"
                result += f"  üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"
    
    def _list_users(self) -> str:
        """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ LDAP"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = self._perform_ldap_search("", limit=20)
            
            if not users:
                return "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            result = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)} –∏–∑ 20):\n\n"
            for user in users:
                result += f"‚Ä¢ **{user['display_name']}**\n"
                result += f"  üë§ –õ–æ–≥–∏–Ω: {user['username']}\n"
                result += f"  üìß Email: {user['email']}\n\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"
    
    def _perform_ldap_search(self, search_query: str, limit: int = 10) -> List[Dict[str, str]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ LDAP"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
            if search_query:
                # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º
                search_filter = f"(&(objectClass=person)(|(cn=*{search_query}*)(sn=*{search_query}*)(givenName=*{search_query}*)(sAMAccountName=*{search_query}*)(mail=*{search_query}*)))"
            else:
                # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                search_filter = "(objectClass=person)"
            
            # –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            attributes = [
                'cn', 'sAMAccountName', 'mail', 'displayName', 
                'givenName', 'sn', 'department', 'telephoneNumber',
                'title', 'company', 'manager'
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            self.connection.search(
                search_base=self.base_dn,
                search_filter=search_filter,
                search_scope=ldap3.SUBTREE,
                attributes=attributes,
                size_limit=limit
            )
            
            users = []
            for entry in self.connection.entries:
                user_data = {
                    'username': str(entry.sAMAccountName) if hasattr(entry, 'sAMAccountName') else '',
                    'display_name': str(entry.displayName) if hasattr(entry, 'displayName') else str(entry.cn),
                    'email': str(entry.mail) if hasattr(entry, 'mail') else '',
                    'first_name': str(entry.givenName) if hasattr(entry, 'givenName') else '',
                    'last_name': str(entry.sn) if hasattr(entry, 'sn') else '',
                    'department': str(entry.department) if hasattr(entry, 'department') else '',
                    'phone': str(entry.telephoneNumber) if hasattr(entry, 'telephoneNumber') else '',
                    'title': str(entry.title) if hasattr(entry, 'title') else '',
                    'company': str(entry.company) if hasattr(entry, 'company') else '',
                    'manager': str(entry.manager) if hasattr(entry, 'manager') else ''
                }
                users.append(user_data)
            
            return users
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è LDAP –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _search_users_intelligent(self, message: str, intent_result) -> str:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            entities = intent_result.entities
            search_query = entities.get('ldap_search_query', '')
            
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∑–∞–ø—Ä–æ—Å, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not search_query:
                # –ò—â–µ–º –§–ò–û, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –∏–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                import re
                # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                words_to_remove = ['–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–Ω–∞–π–¥–∏', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–≤', 'ldap', 'ad', '–ø–æ', '—Ñ–∞–º–∏–ª–∏–∏', '–∏–º–µ–Ω–∏']
                clean_message = message
                for word in words_to_remove:
                    clean_message = clean_message.replace(word, '')
                
                search_query = clean_message.strip()
            
            if not search_query:
                return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: '–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω–æ–≤' –∏–ª–∏ '–ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –ü–µ—Ç—Ä–æ–≤'"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            import re
            count_match = re.search(r'(\d+)', message)
            limit = int(count_match.group(1)) if count_match else 10
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            users = self._perform_ldap_search(search_query, limit)
            
            if not users:
                return f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            result = f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' ({len(users)} –∏–∑ {limit}):\n\n"
            for user in users:
                result += f"‚Ä¢ **{user['display_name']}**\n"
                result += f"  üë§ –õ–æ–≥–∏–Ω: {user['username']}\n"
                result += f"  üìß Email: {user['email']}\n"
                if user['department']:
                    result += f"  üè¢ –û—Ç–¥–µ–ª: {user['department']}\n"
                if user['phone']:
                    result += f"  üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
                if user['title']:
                    result += f"  üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user['title']}\n"
                result += "\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"
    
    def _list_users_intelligent(self, message: str, intent_result) -> str:
        """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            import re
            count_match = re.search(r'(\d+)', message)
            limit = int(count_match.group(1)) if count_match else 20
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = self._perform_ldap_search("", limit)
            
            if not users:
                return "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            result = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)} –∏–∑ {limit}):\n\n"
            for user in users:
                result += f"‚Ä¢ **{user['display_name']}**\n"
                result += f"  üë§ –õ–æ–≥–∏–Ω: {user['username']}\n"
                result += f"  üìß Email: {user['email']}\n"
                if user['department']:
                    result += f"  üè¢ –û—Ç–¥–µ–ª: {user['department']}\n"
                result += "\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}"
    
    def _get_help(self) -> str:
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º LDAP"""
        return """
üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LDAP/Active Directory:

‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω–æ–≤"
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏: "–ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –ü–µ—Ç—Ä–æ–≤"
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏: "–Ω–∞–π–¥–∏ –ø–æ –∏–º–µ–Ω–∏ –ò–≤–∞–Ω"
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
‚Ä¢ –°–ø–∏—Å–æ–∫ —Å –ª–∏–º–∏—Ç–æ–º: "–ø–æ–∫–∞–∂–∏ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

–ü—Ä–∏–º–µ—Ä—ã:
- "–Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –•–∞–π—Ä—É—Ç–¥–∏–Ω–æ–≤"
- "–ø–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –ò–≤–∞–Ω–æ–≤"
- "–Ω–∞–π–¥–∏ –ø–æ –∏–º–µ–Ω–∏ –ö–∞–º–∏–ª—å"
- "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
- "–ø–æ–∫–∞–∂–∏ 30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        """
    
    def _search_user_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            limit = arguments.get('limit', 20)
            # –ò–Ω–æ–≥–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –±—ã–≤–∞–µ—Ç user –∏–ª–∏ name
            username = arguments.get('username') or arguments.get('user') or arguments.get('name')
            email = arguments.get('email')
            
            if not username and not email:
                return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω username –∏–ª–∏ email'}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
            if username:
                search_query = username
            else:
                search_query = email
            
            search_filter = f"(&(objectClass=person)(|(cn=*{search_query}*)(sn=*{search_query}*)(givenName=*{search_query}*)(sAMAccountName=*{search_query}*)(mail=*{search_query}*)))"
            # –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            attributes = [
                'cn', 'sAMAccountName', 'mail', 'displayName', 
                'givenName', 'sn', 'department', 'telephoneNumber',
                'title', 'company', 'manager'
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            self.connection.search(
                search_base=self.base_dn,
                search_filter=search_filter,
                search_scope=ldap3.SUBTREE,
                attributes=attributes,
                size_limit=limit
            )
            
            users = []
            for entry in self.connection.entries:
                user_data = {
                    'username': str(entry.sAMAccountName) if hasattr(entry, 'sAMAccountName') else '',
                    'display_name': str(entry.displayName) if hasattr(entry, 'displayName') else str(entry.cn),
                    'email': str(entry.mail) if hasattr(entry, 'mail') else '',
                    'first_name': str(entry.givenName) if hasattr(entry, 'givenName') else '',
                    'last_name': str(entry.sn) if hasattr(entry, 'sn') else '',
                    'department': str(entry.department) if hasattr(entry, 'department') else '',
                    'phone': str(entry.telephoneNumber) if hasattr(entry, 'telephoneNumber') else '',
                    'title': str(entry.title) if hasattr(entry, 'title') else '',
                    'company': str(entry.company) if hasattr(entry, 'company') else '',
                    'manager': str(entry.manager) if hasattr(entry, 'manager') else ''
                }
                users.append(user_data)
            
            return {'users': users}
        except Exception as e:
            return {'error': str(e)}
    
    def _list_users_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            limit = arguments.get('limit', 20)
            department = arguments.get('department')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
            if department:
                search_filter = f"(&(objectClass=person)(department=*{department}*))"
            else:
                search_filter = "(objectClass=person)"
            
            # –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            attributes = [
                'cn', 'sAMAccountName', 'mail', 'displayName', 
                'givenName', 'sn', 'department', 'telephoneNumber',
                'title', 'company'
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            self.connection.search(
                search_base=self.base_dn,
                search_filter=search_filter,
                search_scope=ldap3.SUBTREE,
                attributes=attributes,
                size_limit=limit
            )
            
            users = []
            for entry in self.connection.entries:
                user_data = {
                    'username': str(entry.sAMAccountName) if hasattr(entry, 'sAMAccountName') else '',
                    'display_name': str(entry.displayName) if hasattr(entry, 'displayName') else str(entry.cn),
                    'email': str(entry.mail) if hasattr(entry, 'mail') else '',
                    'first_name': str(entry.givenName) if hasattr(entry, 'givenName') else '',
                    'last_name': str(entry.sn) if hasattr(entry, 'sn') else '',
                    'department': str(entry.department) if hasattr(entry, 'department') else '',
                    'phone': str(entry.telephoneNumber) if hasattr(entry, 'telephoneNumber') else '',
                    'title': str(entry.title) if hasattr(entry, 'title') else '',
                    'company': str(entry.company) if hasattr(entry, 'company') else ''
                }
                users.append(user_data)
            
            return {'users': users, 'department': department}
        except Exception as e:
            return {'error': str(e)}
    
    def _get_user_details_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            username = arguments.get('username')
            email = arguments.get('email')
            
            if not username and not email:
                return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω username –∏–ª–∏ email'}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞
            if username:
                search_filter = f"(&(objectClass=person)(sAMAccountName={username}))"
            else:
                search_filter = f"(&(objectClass=person)(mail={email}))"
            
            # –ê—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            attributes = [
                'cn', 'sAMAccountName', 'mail', 'displayName', 
                'givenName', 'sn', 'department', 'telephoneNumber',
                'title', 'company', 'manager', 'userAccountControl',
                'whenCreated', 'whenChanged', 'lastLogon'
            ]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            self.connection.search(
                search_base=self.base_dn,
                search_filter=search_filter,
                search_scope=ldap3.SUBTREE,
                attributes=attributes,
                size_limit=1
            )
            
            if not self.connection.entries:
                return {'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            entry = self.connection.entries[0]
            
            user_data = {
                'username': str(entry.sAMAccountName) if hasattr(entry, 'sAMAccountName') else '',
                'display_name': str(entry.displayName) if hasattr(entry, 'displayName') else str(entry.cn),
                'email': str(entry.mail) if hasattr(entry, 'mail') else '',
                'first_name': str(entry.givenName) if hasattr(entry, 'givenName') else '',
                'last_name': str(entry.sn) if hasattr(entry, 'sn') else '',
                'department': str(entry.department) if hasattr(entry, 'department') else '',
                'phone': str(entry.telephoneNumber) if hasattr(entry, 'telephoneNumber') else '',
                'title': str(entry.title) if hasattr(entry, 'title') else '',
                'company': str(entry.company) if hasattr(entry, 'company') else '',
                'manager': str(entry.manager) if hasattr(entry, 'manager') else '',
                'account_control': str(entry.userAccountControl) if hasattr(entry, 'userAccountControl') else '',
                'created': str(entry.whenCreated) if hasattr(entry, 'whenCreated') else '',
                'modified': str(entry.whenChanged) if hasattr(entry, 'whenChanged') else '',
                'last_logon': str(entry.lastLogon) if hasattr(entry, 'lastLogon') else ''
            }
            
            return {'user': user_data}
        except Exception as e:
            return {'error': str(e)}

    def get_tools(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ LDAP"""
        return [
            {
                "name": "search_user",
                "description": "–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LDAP/AD. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –Ω–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ò–≤–∞–Ω–æ–≤",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "username": {"type": "string", "description": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"},
                        "email": {"type": "string", "description": "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"},
                        "limit": {"type": "integer", "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"}
                    },
                    "required": ["search_query"]
                }
            },
            {
                "name": "list_users",
                "description": "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "parameters": {
                    "limit": {"type": "integer", "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"},
                    "department": {"type": "string", "description": "–§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–¥–µ–ª—É"}
                }
            },
            {
                "name": "get_user_details",
                "description": "–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –¥–∞–π –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "username": {"type": "string", "description": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"},
                        "email": {"type": "string", "description": "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"},
                        "limit": {"type": "integer", "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"}
                    }
                }
            }
        ]

    def check_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LDAP"""
        try:
            if self.connection:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.connection.search(
                    search_base=self.base_dn,
                    search_filter="(objectClass=person)",
                    search_scope=ldap3.SUBTREE,
                    attributes=['cn'],
                    size_limit=1
                )
                return {'status': 'connected', 'url': self.ldap_url}
            else:
                return {'status': 'not_configured', 'url': None}
        except Exception as e:
            return {'status': 'error', 'error': str(e), 'url': self.ldap_url}
