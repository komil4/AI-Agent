#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import os
import importlib
import inspect
import logging
from typing import Dict, Any, List, Type
from pathlib import Path

logger = logging.getLogger(__name__)

class MCPServerDiscovery:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self, servers_dir: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        
        Args:
            servers_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞)
        """
        self.servers_dir = servers_dir or os.path.dirname(__file__)
        self.discovered_servers = {}
        self._server_instances = {}  # –ö—ç—à —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤
        self._scan_servers()
    
    def _scan_servers(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            servers_path = Path(self.servers_dir)
            python_files = list(servers_path.glob("*.py"))
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            excluded_files = {
                "__init__.py",
                "base_mcp_server.py", 
                "server_discovery.py"
            }
            
            for file_path in python_files:
                if file_path.name in excluded_files:
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –º–æ–¥—É–ª—è
                module_name = file_path.stem
                
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                    full_module_name = f"mcp_servers.{module_name}"
                    module = importlib.import_module(full_module_name)
                    
                    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–æ–≤
                    server_classes = self._find_server_classes(module, module_name)
                    
                    for server_name, server_class in server_classes.items():
                        self.discovered_servers[server_name] = {
                            'class': server_class,
                            'module': module,
                            'module_name': full_module_name,
                            'file_name': file_path.name
                        }
                        
                        logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä: {server_name} –≤ {file_path.name}")
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {module_name}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
    
    def _find_server_classes(self, module: Any, module_name: str) -> Dict[str, Type]:
        """–ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∞—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –º–æ–¥—É–ª–µ"""
        server_classes = {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã –∏–∑ –º–æ–¥—É–ª—è
            for name, obj in inspect.getmembers(module, inspect.isclass):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ
                if obj.__module__ == module.__name__:
                    # –ò—â–µ–º –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ MCPServer
                    if name.endswith('MCPServer'):
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
                        server_name = self._extract_server_name(name, module_name)
                        server_classes[server_name] = obj
                        
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –≤ –º–æ–¥—É–ª–µ {module_name}: {e}")
            
        return server_classes
    
    def _extract_server_name(self, class_name: str, module_name: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –º–æ–¥—É–ª—è"""
        # –£–±–∏—Ä–∞–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã
        name = class_name.replace('MCPServer', '')
        
        # –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –º–æ–¥—É–ª—è
        if not name:
            name = module_name
            
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        return name.lower()
    
    def get_discovered_servers(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        return self.discovered_servers.copy()
    
    def get_server_class(self, server_name: str) -> Type:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        server_info = self.discovered_servers.get(server_name)
        if server_info:
            return server_info['class']
        return None
    
    def get_server_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        return list(self.discovered_servers.keys())
    
    def create_server_instance(self, server_name: str) -> Any:
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if server_name in self._server_instances:
            logger.debug(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ {server_name}")
            return self._server_instances[server_name]
        
        server_class = self.get_server_class(server_name)
        if server_class:
            try:
                instance = server_class()
                # –ö—ç—à–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
                self._server_instances[server_name] = instance
                logger.debug(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ {server_name}")
                return instance
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
                return None
        return None
    
    def rescan_servers(self):
        """–ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–µ—Ä—ã (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤)"""
        self.discovered_servers.clear()
        self._server_instances.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        self._scan_servers()
        logger.info(f"üîÑ –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(self.discovered_servers)}")
    
    def clear_instance_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        self._server_instances.clear()
        logger.info("üîÑ –ö—ç—à —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—á–∏—â–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
server_discovery = MCPServerDiscovery()
