#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ Anthropic
"""

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
# ============================================================================

import logging
from typing import Dict, Any, List, Optional
from abc import ABC, abstractmethod
from config.config_manager import ConfigManager

logger = logging.getLogger(__name__)

# ============================================================================
# –ü–†–û–ì–†–ê–ú–ú–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° (API)
# ============================================================================

class BaseFastMCPServer(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ Anthropic"""
    
    def __init__(self, server_name: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        self.server_name = server_name
        self.description = self._get_description()
        self.config_manager = ConfigManager()
        self._load_config()
        self._connect()
    
    @abstractmethod
    def _get_description(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        pass
    
    @abstractmethod
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
        pass
    
    @abstractmethod
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–∏—Å—É"""
        pass
    
    def is_enabled(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä"""
        try:
            service_config = self.config_manager.get_service_config(self.server_name)
            return service_config.get('enabled', False)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ {self.server_name}: {e}")
            return False
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É"""
        try:
            return self._test_connection()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.server_name}: {e}")
            return False
    
    @abstractmethod
    def _test_connection(self) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        pass
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É"""
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.server_name}...")
            self._load_config()
            self._connect()
            logger.info(f"‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.server_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.server_name}: {e}")
    
    def get_server_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        return {
            "name": self.server_name,
            "description": self.description,
            "enabled": self.is_enabled(),
            "connected": self.test_connection()
        }
    
    def get_health_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            is_enabled = self.is_enabled()
            is_connected = self.test_connection()
            
            if not is_enabled:
                return {
                    'status': 'disabled',
                    'provider': self.server_name,
                    'message': '–°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏'
                }
            
            if is_connected:
                return {
                    'status': 'healthy',
                    'provider': self.server_name,
                    'message': '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
                }
            else:
                return {
                    'status': 'unhealthy',
                    'provider': self.server_name,
                    'message': '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è {self.server_name}: {e}")
            return {
                'status': 'unhealthy',
                'provider': self.server_name,
                'error': str(e)
            }
    
    def get_tools(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            if not self.is_enabled():
                logger.debug(f"üîß –°–µ—Ä–≤–µ—Ä {self.server_name} –æ—Ç–∫–ª—é—á–µ–Ω, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ _get_tools (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
            if hasattr(self, '_get_tools') and callable(self._get_tools):
                tools = self._get_tools()
                logger.debug(f"üîß –ü–æ–ª—É—á–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç {self.server_name}")
                return tools
            else:
                logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {self.server_name} –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–µ—Ç–æ–¥ _get_tools")
                return []
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç {self.server_name}: {e}")
            return []
    
    def get_admin_settings(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–ª–∞—Å—Å–∞
            server_name = self.__class__.__name__.lower().replace('fastmcp', '').replace('mcp', '').replace('server', '')
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = {
                'name': server_name,
                'display_name': getattr(self, 'display_name', f'{server_name.title()} MCP'),
                'description': getattr(self, 'description', f'MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è {server_name}'),
                'icon': getattr(self, 'icon', 'fas fa-server'),
                'category': getattr(self, 'category', 'mcp_servers'),
                'fields': getattr(self, 'admin_fields', []),
                'enabled': self.is_enabled()
            }
            
            return settings
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            return {
                'name': 'unknown',
                'display_name': 'Unknown MCP',
                'description': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä',
                'icon': 'fas fa-question',
                'category': 'mcp_servers',
                'fields': [],
                'enabled': False
            }

# ============================================================================
# –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def create_tool_schema(name: str, description: str, parameters: Dict[str, Any]) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ Anthropic"""
    return {
        "name": name,
        "description": description,
        "inputSchema": {
            "type": "object",
            "properties": parameters.get("properties", {}),
            "required": parameters.get("required", [])
        }
    }

def validate_tool_parameters(parameters: Dict[str, Any], required: List[str]) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    for param in required:
        if param not in parameters:
            return False
    return True

def format_tool_response(success: bool, message: str, data: Any = None) -> Dict[str, Any]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    response = {
        "success": success,
        "message": message
    }
    if data is not None:
        response["data"] = data
    return response

# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
STANDARD_PARAMETER_TYPES = {
    "string": {"type": "string"},
    "integer": {"type": "integer"},
    "boolean": {"type": "boolean"},
    "array": {"type": "array"},
    "object": {"type": "object"}
}

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
STANDARD_PARAMETER_DESCRIPTIONS = {
    "id": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
    "status": "–°—Ç–∞—Ç—É—Å",
    "priority": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
    "assignee": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
    "project": "–ü—Ä–æ–µ–∫—Ç",
    "created_at": "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
    "updated_at": "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
    "url": "URL –∞–¥—Ä–µ—Å",
    "token": "–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞",
    "username": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    "password": "–ü–∞—Ä–æ–ª—å"
}
