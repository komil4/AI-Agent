import os
import gitlab
from typing import Dict, Any, List
from config.config_manager import ConfigManager

class GitLabMCPServer:
    def __init__(self):
        self.config_manager = ConfigManager()
        self.gitlab_url = None
        self.gitlab_token = None
        self.gl = None
        self._load_config()
        self._connect()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GitLab"""
        gitlab_config = self.config_manager.get_service_config('gitlab')
        self.gitlab_url = gitlab_config.get('url', '')
        self.gitlab_token = gitlab_config.get('token', '')
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab"""
        try:
            gitlab_config = self.config_manager.get_service_config('gitlab')
            if not gitlab_config.get('enabled', False):
                print("‚ö†Ô∏è GitLab –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
                
            if self.gitlab_url and self.gitlab_token:
                self.gl = gitlab.Gitlab(self.gitlab_url, private_token=self.gitlab_token)
                self.gl.auth()
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab —É—Å–ø–µ—à–Ω–æ")
            else:
                print("‚ö†Ô∏è GitLab –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitLab: {e}")
    
    def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ GitLab —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
        self._load_config()
        self._connect()
    
    def process_command(self, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è GitLab (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)"""
        if not self.gl:
            return "‚ùå GitLab –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        
        try:
            return self._process_command_legacy(message)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GitLab: {str(e)}"
    
    def call_tool(self, tool_name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç GitLab –ø–æ –∏–º–µ–Ω–∏"""
        if not self.gl:
            return {"error": "GitLab –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
        
        try:
            if tool_name == "list_projects":
                return self._list_projects_tool(arguments)
            elif tool_name == "get_project_commits":
                return self._get_project_commits_tool(arguments)
            elif tool_name == "create_merge_request":
                return self._create_merge_request_tool(arguments)
            elif tool_name == "get_project_branches":
                return self._get_project_branches_tool(arguments)
            elif tool_name == "search_commits_by_task":
                return self._search_commits_by_task_tool(arguments)
            else:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"}
        except Exception as e:
            return {"error": str(e)}
    
    def _process_command_legacy(self, message: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è GitLab (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)"""
        if not self.gl:
            return "‚ùå GitLab –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        
        message_lower = message.lower()
        
        try:
            if any(word in message_lower for word in ['—Å–æ–∑–¥–∞—Ç—å', '–Ω–æ–≤–∞—è', '—Å–æ–∑–¥–∞–π', '–ø—Ä–æ–µ–∫—Ç']):
                return self._create_project(message)
            elif any(word in message_lower for word in ['–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–Ω–∞–π–¥–∏', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π']):
                return self._search_projects(message)
            elif any(word in message_lower for word in ['—Å–ø–∏—Å–æ–∫', '–≤—Å–µ', '–ø–æ–∫–∞–∑–∞—Ç—å', '–ø—Ä–æ–µ–∫—Ç—ã']):
                return self._list_projects()
            elif any(word in message_lower for word in ['–∫–æ–º–º–∏—Ç', 'commit', '–∏–∑–º–µ–Ω–µ–Ω–∏—è']):
                return self._get_commits(message)
            elif any(word in message_lower for word in ['–≤–µ—Ç–∫–∞', 'branch', '–≤–µ—Ç–∫–∏']):
                return self._get_branches(message)
            elif any(word in message_lower for word in ['merge', '–º–µ—Ä–∂', '—Å–ª–∏—Ç—å']):
                return self._create_merge_request(message)
            else:
                return self._get_help()
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GitLab: {str(e)}"
    
    def process_command_intelligent(self, message: str, intent_result, user_context: dict = None) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è GitLab –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        if not self.gl:
            return "‚ùå GitLab –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        
        try:
            from intent_analyzer import IntentType
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            if intent_result.intent == IntentType.GITLAB_PROJECTS:
                return self._list_projects_intelligent(message, intent_result)
            elif intent_result.intent == IntentType.GITLAB_COMMITS:
                return self._get_commits_intelligent(message, intent_result)
            elif intent_result.intent == IntentType.GITLAB_MY_COMMITS:
                return self._get_my_commits_intelligent(message, intent_result, user_context)
            elif intent_result.intent == IntentType.GITLAB_TASK_COMMITS:
                return self._get_task_commits_intelligent(message, intent_result, user_context)
            elif intent_result.intent == IntentType.GITLAB_MERGE:
                return self._create_merge_request_intelligent(message, intent_result)
            else:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
                return self.process_command(message)
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GitLab: {str(e)}"
    
    def _create_project(self, message: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ GitLab"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            project_name = "new-project"
            if '–Ω–∞–∑–≤–∞–Ω–∏–µ' in message.lower():
                parts = message.split('–Ω–∞–∑–≤–∞–Ω–∏–µ')
                if len(parts) > 1:
                    project_name = parts[1].strip().strip('"').strip("'")
            elif '–ø—Ä–æ–µ–∫—Ç' in message.lower():
                parts = message.split('–ø—Ä–æ–µ–∫—Ç')
                if len(parts) > 1:
                    project_name = parts[1].strip().strip('"').strip("'")
            
            project_data = {
                'name': project_name,
                'description': f'–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ —á–∞—Ç-–±–æ—Ç–∞: {message}',
                'visibility': 'private'
            }
            
            project = self.gl.projects.create(project_data)
            return f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project.name}\nüîó URL: {project.web_url}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}"
    
    def _search_projects(self, message: str) -> str:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ GitLab"""
        try:
            projects = self.gl.projects.list(search=message, per_page=5)
            
            if not projects:
                return "üîç –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            result = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:\n"
            for project in projects:
                result += f"‚Ä¢ {project.name}\n  üìù {project.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n  üîó {project.web_url}\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"
    
    def _list_projects(self) -> str:
        """–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            projects = self.gl.projects.list(per_page=10, order_by='last_activity_at')
            
            if not projects:
                return "üìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            result = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:\n"
            for project in projects:
                result += f"‚Ä¢ {project.name}\n  üìù {project.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n  üîó {project.web_url}\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}"
    
    def _get_commits(self, message: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            project_name = None
            words = message.split()
            for i, word in enumerate(words):
                if word.lower() in ['–ø—Ä–æ–µ–∫—Ç', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'] and i + 1 < len(words):
                    project_name = words[i + 1]
                    break
            
            if not project_name:
                return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            project = projects[0]
            commits = project.commits.list(per_page=5)
            
            if not commits:
                return f"üìù –í –ø—Ä–æ–µ–∫—Ç–µ {project.name} –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤"
            
            result = f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ {project.name}:\n"
            for commit in commits:
                result += f"‚Ä¢ {commit.short_id}: {commit.title}\n  üë§ {commit.author_name}\n  üìÖ {commit.created_at}\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {str(e)}"
    
    def _get_branches(self, message: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            project_name = None
            words = message.split()
            for i, word in enumerate(words):
                if word.lower() in ['–ø—Ä–æ–µ–∫—Ç', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π'] and i + 1 < len(words):
                    project_name = words[i + 1]
                    break
            
            if not project_name:
                return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            project = projects[0]
            branches = project.branches.list(per_page=10)
            
            if not branches:
                return f"üåø –í –ø—Ä–æ–µ–∫—Ç–µ {project.name} –Ω–µ—Ç –≤–µ—Ç–æ–∫"
            
            result = f"üåø –í–µ—Ç–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project.name}:\n"
            for branch in branches:
                result += f"‚Ä¢ {branch.name}\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ç–æ–∫: {str(e)}"
    
    def _create_merge_request(self, message: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç merge request"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            project_name = "test-project"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—Ä–æ–µ–∫—Ç
            source_branch = "feature-branch"
            target_branch = "main"
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            project = projects[0]
            
            mr_data = {
                'source_branch': source_branch,
                'target_branch': target_branch,
                'title': 'Merge Request –∏–∑ —á–∞—Ç-–±–æ—Ç–∞',
                'description': f'–°–æ–∑–¥–∞–Ω –∏–∑ —á–∞—Ç-–±–æ—Ç–∞: {message}'
            }
            
            mr = project.mergerequests.create(mr_data)
            return f"‚úÖ –°–æ–∑–¥–∞–Ω Merge Request: {mr.title}\nüîó URL: {mr.web_url}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Merge Request: {str(e)}"
    
    def _get_help(self) -> str:
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º GitLab"""
        return """
üîß –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitLab:

‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: "—Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç –≤ gitlab"
‚Ä¢ –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã: "–Ω–∞–π–¥–∏ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"
‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤: "–ø–æ–∫–∞–∂–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã"
‚Ä¢ –ö–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞: "–ø–æ–∫–∞–∂–∏ –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ"
‚Ä¢ –ú–æ–∏ –∫–æ–º–º–∏—Ç—ã: "–º–æ–∏ –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ"
‚Ä¢ –ö–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ: "–∫–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ #PROJ-123"
‚Ä¢ –í–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: "–ø–æ–∫–∞–∂–∏ –≤–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ"
‚Ä¢ –°–æ–∑–¥–∞—Ç—å MR: "—Å–æ–∑–¥–∞–π merge request"

–ü—Ä–∏–º–µ—Ä—ã:
- "—Å–æ–∑–¥–∞–π –ø—Ä–æ–µ–∫—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–º–æ–π-–Ω–æ–≤—ã–π-–ø—Ä–æ–µ–∫—Ç'"
- "–Ω–∞–π–¥–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å API"
- "–ø–æ–∫–∞–∂–∏ –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ my-project"
- "–º–æ–∏ –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ my-project"
- "–∫–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ #PROJ-123"
- "–ø–æ–∫–∞–∂–∏ –≤–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ my-project"
        """
    
    def _list_projects_intelligent(self, message: str, intent_result) -> str:
        """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ GitLab –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            entities = intent_result.entities
            search_query = entities.get('search_query', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            import re
            count_match = re.search(r'(\d+)', message)
            per_page = int(count_match.group(1)) if count_match else 10
            
            if search_query:
                # –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                projects = self.gl.projects.list(search=search_query, per_page=per_page)
                if not projects:
                    return f"üîç –ü—Ä–æ–µ–∫—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                result = f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n\n"
            else:
                # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                projects = self.gl.projects.list(per_page=per_page, order_by='last_activity_at')
                if not projects:
                    return "üìã –ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                
                result = f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤:\n\n"
            
            for project in projects:
                result += f"‚Ä¢ **{project.name}**\n"
                result += f"  üìù {project.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                result += f"  üîó {project.web_url}\n"
                result += f"  üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {project.last_activity_at[:10]}\n\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}"
    
    def _get_commits_intelligent(self, message: str, intent_result) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            entities = intent_result.entities
            project_name = entities.get('project_name', '')
            
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not project_name:
                import re
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                words = message.split()
                for i, word in enumerate(words):
                    if word.lower() in ['–ø—Ä–æ–µ–∫—Ç', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', 'repo'] and i + 1 < len(words):
                        project_name = words[i + 1]
                        break
            
            if not project_name:
                return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–∏–º–µ—Ä: '–ø–æ–∫–∞–∂–∏ –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ my-project'"
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            project = projects[0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
            import re
            count_match = re.search(r'(\d+)', message)
            per_page = int(count_match.group(1)) if count_match else 5
            
            commits = project.commits.list(per_page=per_page)
            
            if not commits:
                return f"üìù –í –ø—Ä–æ–µ–∫—Ç–µ {project.name} –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤"
            
            result = f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ **{project.name}**:\n\n"
            for commit in commits:
                result += f"‚Ä¢ **{commit.short_id}**: {commit.title}\n"
                result += f"  üë§ –ê–≤—Ç–æ—Ä: {commit.author_name}\n"
                result += f"  üìÖ –î–∞—Ç–∞: {commit.created_at[:10]}\n"
                result += f"  üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç]({project.web_url}/-/commit/{commit.id})\n\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤: {str(e)}"
    
    def _create_merge_request_intelligent(self, message: str, intent_result) -> str:
        """–°–æ–∑–¥–∞–µ—Ç merge request –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            entities = intent_result.entities
            project_name = entities.get('project_name', '')
            
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            if not project_name:
                projects = self.gl.projects.list(per_page=1)
                if not projects:
                    return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Merge Request"
                project = projects[0]
            else:
                projects = self.gl.projects.list(search=project_name)
                if not projects:
                    return f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
                project = projects[0]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ç–∫–∞—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            import re
            source_branch = "feature-branch"
            target_branch = "main"
            
            # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–µ—Ç–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            branch_match = re.search(r'–∏–∑\s+–≤–µ—Ç–∫–∏\s+(\w+)', message, re.IGNORECASE)
            if branch_match:
                source_branch = branch_match.group(1)
            
            branch_match = re.search(r'–≤\s+–≤–µ—Ç–∫—É\s+(\w+)', message, re.IGNORECASE)
            if branch_match:
                target_branch = branch_match.group(1)
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            description = f"Merge Request —Å–æ–∑–¥–∞–Ω –∏–∑ —á–∞—Ç-–±–æ—Ç–∞\n\n–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}"
            
            mr_data = {
                'source_branch': source_branch,
                'target_branch': target_branch,
                'title': f'MR –∏–∑ —á–∞—Ç-–±–æ—Ç–∞: {message[:50]}...',
                'description': description
            }
            
            mr = project.mergerequests.create(mr_data)
            return f"‚úÖ –°–æ–∑–¥–∞–Ω Merge Request: **{mr.title}**\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å MR]({mr.web_url})\nüìã –ü—Ä–æ–µ–∫—Ç: {project.name}\nüåø –ò–∑ –≤–µ—Ç–∫–∏: {source_branch} ‚Üí {target_branch}"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Merge Request: {str(e)}"
    
    def _get_my_commits_intelligent(self, message: str, intent_result, user_context: dict = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–æ–∏ –∫–æ–º–º–∏—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            entities = intent_result.entities
            project_name = entities.get('my_project_name', '')
            
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not project_name:
                import re
                # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                words = message.split()
                for i, word in enumerate(words):
                    if word.lower() in ['–ø—Ä–æ–µ–∫—Ç', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', 'repo'] and i + 1 < len(words):
                        project_name = words[i + 1]
                        break
            
            if not project_name:
                return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–∏–º–µ—Ä: '–º–æ–∏ –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ my-project'"
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return f"‚ùå –ü—Ä–æ–µ–∫—Ç '{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            project = projects[0]
            
            # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            user_email = None
            if user_context and isinstance(user_context, dict):
                user_info = user_context.get('user', {})
                user_email = user_info.get('email')
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ email –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ GitLab
            if not user_email:
                try:
                    current_user = self.gl.user
                    if current_user and hasattr(current_user, 'email'):
                        user_email = current_user.email
                except:
                    pass
            
            if not user_email:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
            import re
            count_match = re.search(r'(\d+)', message)
            per_page = int(count_match.group(1)) if count_match else 10
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
            # –§–∏–ª—å—Ç—Ä –ø–æ author_email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö python-gitlab/GitLab API.
            # –ü–æ—ç—Ç–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é –ø–æ email –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤.
            commits = project.commits.list(
                per_page=100,  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
                order_by='created_at',
                sort='desc'
            )
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ email –∞–≤—Ç–æ—Ä–∞
            filtered_commits = []
            for commit in commits:
                # –ò–Ω–æ–≥–¥–∞ author_email –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º get
                if hasattr(commit, 'author_email') and commit.author_email == user_email:
                    filtered_commits.append(commit)
                # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if len(filtered_commits) >= per_page:
                    break
            commits = filtered_commits
            
            if not commits:
                return f"üìù –í –ø—Ä–æ–µ–∫—Ç–µ {project.name} –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email}"
            
            result = f"üë§ –ö–æ–º–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_email} –≤ –ø—Ä–æ–µ–∫—Ç–µ **{project.name}**:\n\n"
            for commit in commits:
                result += f"‚Ä¢ **{commit.short_id}**: {commit.title}\n"
                result += f"  üìÖ –î–∞—Ç–∞: {commit.created_at[:10]}\n"
                result += f"  üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç]({project.web_url}/-/commit/{commit.id})\n\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"
    
    def _get_task_commits_intelligent(self, message: str, intent_result, user_context: dict = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""
        try:
            entities = intent_result.entities
            task_key = entities.get('task_key', '') or entities.get('task_number', '')
            
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if not task_key:
                import re
                # –ò—â–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                task_match = re.search(r'#?([A-Z]+-\d+)', message)
                if task_match:
                    task_key = task_match.group(1)
                else:
                    return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: '–∫–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ #PROJ-123'"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
            import re
            count_match = re.search(r'(\d+)', message)
            per_page = int(count_match.group(1)) if count_match else 20
            
            # –ò—â–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            all_commits = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            projects = self.gl.projects.list(per_page=100, membership=True)
            
            for project in projects:
                try:
                    # –ò—â–µ–º –∫–æ–º–º–∏—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    commits = project.commits.list(
                        per_page=per_page,
                        search=task_key,
                        order_by='created_at',
                        sort='desc'
                    )
                    
                    for commit in commits:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if commit.title.startswith(task_key) or f" {task_key}" in commit.title:
                            all_commits.append({
                                'commit': commit,
                                'project': project
                            })
                except Exception as e:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
                    continue
            
            if not all_commits:
                return f"üìù –ö–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ {task_key} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            all_commits.sort(key=lambda x: x['commit'].created_at, reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            all_commits = all_commits[:per_page]
            
            result = f"üéØ –ö–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ **{task_key}**:\n\n"
            for item in all_commits:
                commit = item['commit']
                project = item['project']
                
                result += f"‚Ä¢ **{commit.short_id}**: {commit.title}\n"
                result += f"  üìÅ –ü—Ä–æ–µ–∫—Ç: {project.name}\n"
                result += f"  üë§ –ê–≤—Ç–æ—Ä: {commit.author_name}\n"
                result += f"  üìÖ –î–∞—Ç–∞: {commit.created_at[:10]}\n"
                result += f"  üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–∏—Ç]({project.web_url}/-/commit/{commit.id})\n\n"
            
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ –∑–∞–¥–∞—á–µ: {str(e)}"
    
    def _list_projects_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            search = arguments.get('search', '')
            per_page = arguments.get('per_page', 10)
            
            if search:
                projects = self.gl.projects.list(search=search, per_page=per_page)
            else:
                projects = self.gl.projects.list(per_page=per_page, order_by='last_activity_at')
            
            result = []
            for project in projects:
                result.append({
                    'id': project.id,
                    'name': project.name,
                    'description': project.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                    'web_url': project.web_url,
                    'last_activity_at': project.last_activity_at,
                    'visibility': project.visibility
                })
            
            return {'projects': result}
        except Exception as e:
            return {'error': str(e)}
    
    def _get_project_commits_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            project_name = arguments.get('project_name')
            per_page = arguments.get('per_page', 5)
            author_email = arguments.get('author_email')
            
            if not project_name:
                return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'}
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return {'error': f'–ü—Ä–æ–µ–∫—Ç "{project_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            project = projects[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã
            commits = project.commits.list(per_page=per_page)
            
            result = []
            for commit in commits:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ email –∞–≤—Ç–æ—Ä–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if author_email and hasattr(commit, 'author_email') and commit.author_email != author_email:
                    continue
                
                result.append({
                    'id': commit.id,
                    'short_id': commit.short_id,
                    'title': commit.title,
                    'message': commit.message,
                    'author_name': commit.author_name,
                    'author_email': getattr(commit, 'author_email', ''),
                    'created_at': commit.created_at,
                    'web_url': f"{project.web_url}/-/commit/{commit.id}"
                })
            
            return {'commits': result, 'project_name': project.name}
        except Exception as e:
            return {'error': str(e)}
    
    def _create_merge_request_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç merge request —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            project_name = arguments.get('project_name')
            source_branch = arguments.get('source_branch')
            target_branch = arguments.get('target_branch')
            title = arguments.get('title')
            description = arguments.get('description', '')
            
            if not all([project_name, source_branch, target_branch, title]):
                return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: project_name, source_branch, target_branch, title'}
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return {'error': f'–ü—Ä–æ–µ–∫—Ç "{project_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            project = projects[0]
            
            # –°–æ–∑–¥–∞–µ–º MR
            mr_data = {
                'source_branch': source_branch,
                'target_branch': target_branch,
                'title': title,
                'description': description
            }
            
            mr = project.mergerequests.create(mr_data)
            
            return {
                'success': True,
                'id': mr.id,
                'iid': mr.iid,
                'title': mr.title,
                'web_url': mr.web_url,
                'source_branch': mr.source_branch,
                'target_branch': mr.target_branch
            }
        except Exception as e:
            return {'error': str(e)}
    
    def _get_project_branches_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            project_name = arguments.get('project_name')
            
            if not project_name:
                return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'}
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç
            projects = self.gl.projects.list(search=project_name)
            if not projects:
                return {'error': f'–ü—Ä–æ–µ–∫—Ç "{project_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            project = projects[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ç–∫–∏
            branches = project.branches.list()
            
            result = []
            for branch in branches:
                result.append({
                    'name': branch.name,
                    'default': branch.default,
                    'protected': branch.protected,
                    'web_url': f"{project.web_url}/-/tree/{branch.name}"
                })
            
            return {'branches': result, 'project_name': project.name}
        except Exception as e:
            return {'error': str(e)}
    
    def _search_commits_by_task_tool(self, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–ò—â–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        try:
            task_key = arguments.get('task_key')
            per_page = arguments.get('per_page', 20)
            
            if not task_key:
                return {'error': '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏'}
            
            # –ò—â–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
            all_commits = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            projects = self.gl.projects.list(per_page=100, membership=True)
            
            for project in projects:
                try:
                    # –ò—â–µ–º –∫–æ–º–º–∏—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    commits = project.commits.list(
                        per_page=per_page,
                        search=task_key,
                        order_by='created_at',
                        sort='desc'
                    )
                    
                    for commit in commits:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–∏—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
                        if commit.title.startswith(task_key) or f" {task_key}" in commit.title:
                            all_commits.append({
                                'id': commit.id,
                                'short_id': commit.short_id,
                                'title': commit.title,
                                'message': commit.message,
                                'author_name': commit.author_name,
                                'author_email': getattr(commit, 'author_email', ''),
                                'created_at': commit.created_at,
                                'project_name': project.name,
                                'web_url': f"{project.web_url}/-/commit/{commit.id}"
                            })
                except Exception:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            all_commits.sort(key=lambda x: x['created_at'], reverse=True)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            all_commits = all_commits[:per_page]
            
            return {'commits': all_commits, 'task_key': task_key}
        except Exception as e:
            return {'error': str(e)}

    def get_tools(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ GitLab"""
        return [
            {
                "name": "list_projects",
                "description": "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ GitLab",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "search": {"type": "string", "description": "–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"},
                        "per_page": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"}
                    }
                }
            },
            {
                "name": "get_project_commits",
                "description": "–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "project_name": {"type": "string", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"},
                        "per_page": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤"},
                        "author_email": {"type": "string", "description": "Email –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"}
                    },
                    "required": ["project_name"]
                }
            },
            {
                "name": "create_merge_request",
                "description": "–°–æ–∑–¥–∞–µ—Ç merge request",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "project_name": {"type": "string", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"},
                        "source_branch": {"type": "string", "description": "–ò—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ç–∫–∞"},
                        "target_branch": {"type": "string", "description": "–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞"},
                        "title": {"type": "string", "description": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ MR"},
                        "description": {"type": "string", "description": "–û–ø–∏—Å–∞–Ω–∏–µ MR"}
                    },
                    "required": ["project_name", "source_branch", "target_branch", "title"]
                }
            },
            {
                "name": "get_project_branches",
                "description": "–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "project_name": {"type": "string", "description": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"}
                    },
                    "required": ["project_name"]
                }
            },
            {
                "name": "search_commits_by_task",
                "description": "–ò—â–µ—Ç –∫–æ–º–º–∏—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞—á–∏",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "task_key": {"type": "string", "description": "–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PROJ-123)"},
                        "per_page": {"type": "integer", "description": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"}
                    },
                    "required": ["task_key"]
                }
            }
        ]

    def check_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitLab"""
        try:
            if self.gl:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.gl.user
                return {'status': 'connected', 'url': self.gitlab_url}
            else:
                return {'status': 'not_configured', 'url': None}
        except Exception as e:
            return {'status': 'error', 'error': str(e), 'url': self.gitlab_url}
