import os
import re
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
from dataclasses import dataclass
from jira import JIRA
import gitlab
import requests

logger = logging.getLogger(__name__)

@dataclass
class CommitInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–∏—Ç–µ"""
    id: str
    message: str
    author: str
    author_email: str
    date: datetime
    files_changed: int
    lines_added: int
    lines_removed: int
    url: str

@dataclass
class ConfluencePage:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Confluence"""
    id: str
    title: str
    url: str
    author: str
    created: datetime
    updated: datetime

@dataclass
class CodeAnalysisReport:
    """–û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞"""
    task_key: str
    task_summary: str
    task_status: str
    task_assignee: str
    task_created: datetime
    task_updated: datetime
    
    # –ö–æ–º–º–∏—Ç—ã
    total_commits: int
    commits: List[CommitInfo]
    first_commit_date: Optional[datetime]
    last_commit_date: Optional[datetime]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∞
    total_lines_added: int
    total_lines_removed: int
    total_files_changed: int
    
    # –ê–≤—Ç–æ—Ä—ã
    authors: List[Dict[str, Any]]
    main_author: str
    
    # Confluence —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    confluence_pages: List[ConfluencePage]
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    development_duration_days: int
    analysis_date: datetime

class CodeAnalyzer:
    def __init__(self):
        self.jira_url = os.getenv('JIRA_URL')
        self.jira_username = os.getenv('JIRA_USERNAME')
        self.jira_token = os.getenv('JIRA_API_TOKEN')
        self.gitlab_url = os.getenv('GITLAB_URL')
        self.gitlab_token = os.getenv('GITLAB_TOKEN')
        self.confluence_url = os.getenv('ATLASSIAN_URL')
        self.confluence_username = os.getenv('ATLASSIAN_USERNAME')
        self.confluence_token = os.getenv('ATLASSIAN_API_TOKEN')
        
        self.jira = None
        self.gitlab = None
        self.confluence = None
        
        self._initialize_connections()
    
    def _initialize_connections(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Å–µ—Ä–≤–∏—Å–∞–º"""
        try:
            # Jira
            if self.jira_url and self.jira_username and self.jira_token:
                self.jira = JIRA(
                    server=self.jira_url,
                    basic_auth=(self.jira_username, self.jira_token)
                )
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira —É—Å–ø–µ—à–Ω–æ")
            
            # GitLab
            if self.gitlab_url and self.gitlab_token:
                self.gitlab = gitlab.Gitlab(self.gitlab_url, private_token=self.gitlab_token)
                self.gitlab.auth()
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab —É—Å–ø–µ—à–Ω–æ")
            
            # Confluence
            if self.confluence_url and self.confluence_username and self.confluence_token:
                from atlassian import Confluence
                self.confluence = Confluence(
                    url=self.confluence_url,
                    username=self.confluence_username,
                    password=self.confluence_token
                )
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Confluence —É—Å–ø–µ—à–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    def analyze_task_code(self, task_key: str) -> Optional[CodeAnalysisReport]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–æ –∑–∞–¥–∞—á–µ Jira
        """
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ {task_key}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
            task_info = self._get_task_info(task_key)
            if not task_info:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ
            commits = self._get_commits_for_task(task_key)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence
            confluence_pages = self._get_confluence_pages_for_task(task_key)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–∏—Ç—ã
            analysis = self._analyze_commits(commits)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = CodeAnalysisReport(
                task_key=task_key,
                task_summary=task_info['summary'],
                task_status=task_info['status'],
                task_assignee=task_info['assignee'],
                task_created=task_info['created'],
                task_updated=task_info['updated'],
                
                total_commits=len(commits),
                commits=commits,
                first_commit_date=analysis['first_commit_date'],
                last_commit_date=analysis['last_commit_date'],
                
                total_lines_added=analysis['total_lines_added'],
                total_lines_removed=analysis['total_lines_removed'],
                total_files_changed=analysis['total_files_changed'],
                
                authors=analysis['authors'],
                main_author=analysis['main_author'],
                
                confluence_pages=confluence_pages,
                
                development_duration_days=analysis['development_duration_days'],
                analysis_date=datetime.utcnow()
            )
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ {task_key} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏ {task_key}: {e}")
            return None
    
    def _get_task_info(self, task_key: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ Jira"""
        if not self.jira:
            logger.error("Jira –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return None
        
        try:
            issue = self.jira.issue(task_key)
            
            return {
                'summary': issue.fields.summary,
                'status': issue.fields.status.name,
                'assignee': issue.fields.assignee.displayName if issue.fields.assignee else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
                'created': datetime.strptime(issue.fields.created, '%Y-%m-%dT%H:%M:%S.%f%z'),
                'updated': datetime.strptime(issue.fields.updated, '%Y-%m-%dT%H:%M:%S.%f%z')
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ {task_key}: {e}")
            return None
    
    def _get_commits_for_task(self, task_key: str) -> List[CommitInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–µ–π"""
        if not self.gitlab:
            logger.warning("GitLab –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return []
        
        try:
            commits = []
            
            # –ò—â–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ –∫–ª—é—á—É –∑–∞–¥–∞—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            search_query = f"refs {task_key}"
            projects = self.gitlab.projects.list(search=task_key, per_page=10)
            
            for project in projects:
                try:
                    # –ò—â–µ–º –∫–æ–º–º–∏—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
                    project_commits = project.commits.list(
                        ref_name='main',
                        per_page=100,
                        since=(datetime.utcnow() - timedelta(days=365)).isoformat()
                    )
                    
                    for commit in project_commits:
                        if task_key.lower() in commit.message.lower():
                            commit_info = self._analyze_commit(commit, project)
                            if commit_info:
                                commits.append(commit_info)
                                
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ {project.name}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            commits.sort(key=lambda x: x.date)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(commits)} –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_key}")
            return commits
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤: {e}")
            return []
    
    def _analyze_commit(self, commit, project) -> Optional[CommitInfo]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–º–º–∏—Ç–∞
            commit_details = project.commits.get(commit.id)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            stats = commit_details.stats if hasattr(commit_details, 'stats') else {}
            lines_added = stats.get('additions', 0)
            lines_removed = stats.get('deletions', 0)
            files_changed = stats.get('total', 0)
            
            return CommitInfo(
                id=commit.id,
                message=commit.message,
                author=commit.author_name,
                author_email=commit.author_email,
                date=datetime.strptime(commit.created_at, '%Y-%m-%dT%H:%M:%S.%fZ'),
                files_changed=files_changed,
                lines_added=lines_added,
                lines_removed=lines_removed,
                url=f"{project.web_url}/-/commit/{commit.id}"
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–∏—Ç–∞ {commit.id}: {e}")
            return None
    
    def _analyze_commits(self, commits: List[CommitInfo]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤"""
        if not commits:
            return {
                'first_commit_date': None,
                'last_commit_date': None,
                'total_lines_added': 0,
                'total_lines_removed': 0,
                'total_files_changed': 0,
                'authors': [],
                'main_author': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'development_duration_days': 0
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        total_lines_added = sum(c.lines_added for c in commits)
        total_lines_removed = sum(c.lines_removed for c in commits)
        total_files_changed = sum(c.files_changed for c in commits)
        
        # –î–∞—Ç—ã
        first_commit_date = min(c.date for c in commits)
        last_commit_date = max(c.date for c in commits)
        development_duration_days = (last_commit_date - first_commit_date).days
        
        # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–æ–≤
        author_stats = {}
        for commit in commits:
            author = commit.author
            if author not in author_stats:
                author_stats[author] = {
                    'name': author,
                    'commits': 0,
                    'lines_added': 0,
                    'lines_removed': 0
                }
            
            author_stats[author]['commits'] += 1
            author_stats[author]['lines_added'] += commit.lines_added
            author_stats[author]['lines_removed'] += commit.lines_removed
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–∏—Ç–æ–≤
        authors = sorted(author_stats.values(), key=lambda x: x['commits'], reverse=True)
        main_author = authors[0]['name'] if authors else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        return {
            'first_commit_date': first_commit_date,
            'last_commit_date': last_commit_date,
            'total_lines_added': total_lines_added,
            'total_lines_removed': total_lines_removed,
            'total_files_changed': total_files_changed,
            'authors': authors,
            'main_author': main_author,
            'development_duration_days': development_duration_days
        }
    
    def _get_confluence_pages_for_task(self, task_key: str) -> List[ConfluencePage]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence"""
        if not self.confluence:
            logger.warning("Confluence –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return []
        
        try:
            pages = []
            
            # –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –∫–ª—é—á—É –∑–∞–¥–∞—á–∏
            cql = f'text ~ "{task_key}"'
            search_results = self.confluence.cql(cql, limit=10)
            
            if search_results and search_results.get('results'):
                for page_data in search_results['results']:
                    try:
                        page = self.confluence.get_page_by_id(page_data['id'])
                        
                        pages.append(ConfluencePage(
                            id=page['id'],
                            title=page['title'],
                            url=f"{self.confluence_url}/pages/viewpage.action?pageId={page['id']}",
                            author=page['version']['by']['displayName'],
                            created=datetime.strptime(page['version']['when'], '%Y-%m-%dT%H:%M:%S.%fZ'),
                            updated=datetime.strptime(page['version']['when'], '%Y-%m-%dT%H:%M:%S.%fZ')
                        ))
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_data['id']}: {e}")
                        continue
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü Confluence –¥–ª—è –∑–∞–¥–∞—á–∏ {task_key}")
            return pages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü Confluence: {e}")
            return []
    
    def generate_report_text(self, report: CodeAnalysisReport) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        if not report:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        def format_date(date):
            return date.strftime('%d.%m.%Y %H:%M') if date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report_text = f"""
üìä **–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ö–û–î–ê –ó–ê–î–ê–ß–ò {report.task_key}**

**üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ:**
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {report.task_summary}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {report.task_status}
‚Ä¢ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {report.task_assignee}
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {format_date(report.task_created)}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {format_date(report.task_updated)}

**üíª –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: {report.total_commits}
‚Ä¢ –°—Ç—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {report.total_lines_added:,}
‚Ä¢ –°—Ç—Ä–æ–∫ —É–¥–∞–ª–µ–Ω–æ: {report.total_lines_removed:,}
‚Ä¢ –§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {report.total_files_changed:,}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {report.development_duration_days} –¥–Ω–µ–π

**üë• –ê–≤—Ç–æ—Ä—ã:**
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–∞—Ö
        for i, author in enumerate(report.authors[:5], 1):
            report_text += f"‚Ä¢ {i}. {author['name']}: {author['commits']} –∫–æ–º–º–∏—Ç–æ–≤, +{author['lines_added']} -{author['lines_removed']} —Å—Ç—Ä–æ–∫\n"
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        if report.first_commit_date and report.last_commit_date:
            report_text += f"""
**‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:**
‚Ä¢ –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç: {format_date(report.first_commit_date)}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {format_date(report.last_commit_date)}
"""
        
        # Confluence —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if report.confluence_pages:
            report_text += f"""
**üìÑ –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Confluence ({len(report.confluence_pages)}):**
"""
            for page in report.confluence_pages[:5]:
                report_text += f"‚Ä¢ [{page.title}]({page.url})\n"
        
        # –ö–æ–º–º–∏—Ç—ã
        if report.commits:
            report_text += f"""
**üîó –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:**
"""
            for commit in report.commits[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–æ–º–º–∏—Ç–∞
                report_text += f"‚Ä¢ [{commit.id[:8]}]({commit.url}) - {commit.message[:50]}... ({format_date(commit.date)})\n"
        
        report_text += f"""
---
*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {format_date(report.analysis_date)}*
"""
        
        return report_text
