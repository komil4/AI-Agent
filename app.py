#!/usr/bin/env python3
"""
MCP Chat - FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏
"""

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–£–õ–Ø
# ============================================================================

import os
import asyncio
import logging
from datetime import datetime
from fastapi import FastAPI, HTTPException, Request, Depends, status
from fastapi.responses import HTMLResponse, FileResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from dotenv import load_dotenv
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
# MCP —Å–µ—Ä–≤–µ—Ä—ã —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ server_discovery
from llm_client import LLMClient
from database import init_database
from chat_service import chat_service
from models import (
    ChatMessage, ChatResponse, ErrorResponse, HealthResponse, ServiceStatus,
    LoginRequest, LoginResponse, UserInfo, LogoutResponse,
    AdminLoginRequest, AdminLoginResponse, AdminPasswordChangeRequest, 
    AdminPasswordChangeResponse, ConfigUpdateRequest, ConfigUpdateResponse,
    ConnectionTestRequest, ConnectionTestResponse, AdminInfo,
    CodeAnalysisRequest, CodeAnalysisResponse,
    LLMConfigRequest, LLMConfigResponse, LLMProviderTestRequest, LLMProviderTestResponse
)
from auth.ad_auth import ADAuthenticator
from auth.session_manager import SessionManager
from auth.middleware import AuthMiddleware
from auth.admin_auth import AdminAuth
from config.config_manager import ConfigManager
from analyzers.code_analyzer import CodeAnalyzer
from mcp_client import mcp_client, MCPClient
from config.llm_config import LLMProvider

# ============================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´
# ============================================================================

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
config_manager = ConfigManager()
ad_auth = ADAuthenticator()
session_manager = SessionManager()
admin_auth = AdminAuth()
llm_client = LLMClient()
code_analyzer = CodeAnalyzer()

# MCP —Å–µ—Ä–≤–µ—Ä—ã —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ server_discovery

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="MCP Chat API",
    description="API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.add_middleware(AuthMiddleware, session_manager=session_manager)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")

# ============================================================================
# –ü–†–û–ì–†–ê–ú–ú–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° (API)
# ============================================================================

# --- –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ MCP Chat...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        database_url = config_manager.get_database_url()
        init_database(database_url)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞
        await mcp_client.initialize()
        
        logger.info("‚úÖ MCP Chat –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP Chat...")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ MCP —Å–µ—Å—Å–∏–π
        await mcp_client.close_all_sessions()
        
        logger.info("‚úÖ MCP Chat –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è MCP —Å–µ—Å—Å–∏–π: {e}")

# --- –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---

@app.get("/", response_class=HTMLResponse)
async def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    with open("templates/index.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.get("/login", response_class=HTMLResponse)
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    with open("templates/login.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.get("/admin", response_class=HTMLResponse)
async def admin_page():
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    with open("templates/admin.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.get("/favicon.ico")
async def favicon():
    """–ò–∫–æ–Ω–∫–∞ —Å–∞–π—Ç–∞"""
    return FileResponse("static/favicon.ico")

# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ---

@app.post("/api/auth/login")
async def login(login_data: LoginRequest):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∏–ª–∏ LDAP"""
    try:
        logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {login_data.username}")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü–µ users
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –ë–î...")
        db_user = chat_service.authenticate_local_user(login_data.username, login_data.password)
        
        if db_user:
            # –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {db_user.username}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Å—Å–∏–∏
            user_info = {
                "username": db_user.username,
                "display_name": db_user.display_name or db_user.username,
                "email": db_user.email or "",
                "groups": db_user.groups or [],
                "is_admin": db_user.is_admin
            }
            
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏ —Å–µ—Å—Å–∏—é
            access_token = ad_auth.create_access_token(user_info)
            session_id = session_manager.create_session(user_info, access_token)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            response = LoginResponse(
                success=True,
                message="–£—Å–ø–µ—à–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                user_info=user_info
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
            from fastapi.responses import JSONResponse
            json_response = JSONResponse(content=response.dict(), status_code=200)
            json_response.set_cookie(
                key="session_id",
                value=session_id,
                httponly=True,
                secure=False,
                samesite="lax",
                max_age=24*60*60
            )
            
            return json_response
        
        # –®–∞–≥ 2: –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º LDAP (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        logger.info("üîç –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º LDAP...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LDAP
        ad_config = config_manager.get_service_config('active_directory')
        ldap_enabled = ad_config.get('enabled', False)
        
        if not ldap_enabled:
            logger.warning("‚ùå LDAP –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return LoginResponse(
                success=False,
                message="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. LDAP –æ—Ç–∫–ª—é—á–µ–Ω."
            )
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ LDAP
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ LDAP...")
        ldap_user_info = ad_auth.authenticate_user(login_data.username, login_data.password)
        
        if not ldap_user_info:
            logger.warning(f"‚ùå LDAP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è: {login_data.username}")
            return LoginResponse(
                success=False,
                message="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Active Directory"
            )
        
        # –®–∞–≥ 3: LDAP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        logger.info(f"‚úÖ LDAP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {ldap_user_info['username']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ldap_user_info['is_ldap_user'] = True
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        logger.info(f"üíæ –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {ldap_user_info['username']}")
        db_user = chat_service.get_or_create_user(ldap_user_info['username'], ldap_user_info)
        logger.info(f"‚úÖ LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: {db_user.id}")
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω –∏ —Å–µ—Å—Å–∏—é
        access_token = ad_auth.create_access_token(ldap_user_info)
        session_id = session_manager.create_session(ldap_user_info, access_token)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        response = LoginResponse(
            success=True,
            message="–£—Å–ø–µ—à–Ω–∞—è LDAP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            user_info=ldap_user_info
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie
        from fastapi.responses import JSONResponse
        json_response = JSONResponse(content=response.dict(), status_code=200)
        json_response.set_cookie(
            key="session_id",
            value=session_id,
            httponly=True,
            secure=False,
            samesite="lax",
            max_age=24*60*60
        )
        
        return json_response
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        return LoginResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/api/auth/logout")
async def logout(request: Request):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_id = request.cookies.get('session_id')
        if session_id:
            session_manager.delete_session(session_id)
        
        response = LogoutResponse(success=True, message="–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥")
        from fastapi.responses import JSONResponse
        json_response = JSONResponse(content=response.dict(), status_code=200)
        json_response.delete_cookie(key="session_id")
        return json_response
    except Exception as e:
        return LogoutResponse(success=False, message=f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}")

# --- –ß–∞—Ç ---

@app.post("/api/chat", response_model=ChatResponse)
async def chat(chat_message: ChatMessage, request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç-–±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_session(request)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('username')}")
        
        user_message = chat_message.message.strip()
        
        if not user_message:
            raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω/—Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î: {db_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = chat_service.get_active_session(db_user.id)
        if not active_session:
            active_session = chat_service.create_chat_session(db_user.id)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {active_session.id}")
        else:
            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è: {active_session.id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_message_data = chat_service.add_message(
            active_session.id, 
            db_user.id, 
            'user', 
            user_message,
            {'ip': request.client.host if request.client else None}
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_message_data['id']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        logger.info("üìö –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏...")
        session_history = chat_service.get_session_history(active_session.id, limit=10)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: {len(session_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ReAct –∞–≥–µ–Ω—Ç–∞
        use_react = chat_message.use_react if hasattr(chat_message, 'use_react') else False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_context = {
            'user': {
                'username': user.get('username'),
                'display_name': user.get('display_name'),
                'email': user.get('email'),
                'groups': user.get('groups', [])
            },
            'session_id': active_session.id,
            'chat_history': session_history,
            'use_react': use_react
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π MCP —Å–µ—Ä–≤–µ—Ä
        logger.info("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞...")
        response = await process_command(user_message, user_context)
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response[:100]}...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        assistant_message_data = chat_service.add_message(
            active_session.id, 
            db_user.id, 
            'assistant', 
            response,
            {'session_id': active_session.id}
        )
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {assistant_message_data['id']}")
        
        return ChatResponse(
            response=response,
            status="success"
        )
    
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ chat endpoint: {str(e)}")
        import traceback
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        )

# --- –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ ---

@app.get("/api/chat/sessions")
async def get_chat_sessions(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        sessions = chat_service.get_user_sessions(db_user.id)
        
        return {
            "sessions": [
                {
                    "id": session_data["id"],
                    "name": session_data["session_name"],
                    "created_at": session_data["created_at"].isoformat(),
                    "updated_at": session_data["updated_at"].isoformat(),
                    "is_active": session_data["is_active"]
                }
                for session_data in sessions
            ]
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {str(e)}")

@app.get("/api/chat/sessions/{session_id}/history")
async def get_session_history(session_id: int, request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sessions = chat_service.get_user_sessions(db_user.id)
        if not any(session_data["id"] == session_id for session_data in sessions):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        history = chat_service.get_session_history(session_id)
        return {"history": history}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@app.post("/api/chat/sessions/{session_id}/close")
async def close_session(session_id: int, request: Request):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sessions = chat_service.get_user_sessions(db_user.id)
        if not any(session_data["id"] == session_id for session_data in sessions):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        chat_service.close_session(session_id)
        return {"message": "–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

@app.get("/api/chat/stats")
async def get_user_stats(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        stats = chat_service.get_user_stats(db_user.id)
        return stats
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ ---

@app.post("/api/admin/login", response_model=AdminLoginResponse)
async def admin_login(login_data: AdminLoginRequest):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        success = admin_auth.authenticate_admin(login_data.username, login_data.password)
        
        if success:
            return AdminLoginResponse(
                success=True,
                message="–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
            )
        else:
            return AdminLoginResponse(
                success=False,
                message="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞"
            )
    except Exception as e:
        return AdminLoginResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
        )

@app.get("/api/admin/info")
async def get_admin_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        config = config_manager.get_config()
        
        admin_info = AdminInfo(
            services_status={
                "jira": {"enabled": config.get("jira", {}).get("enabled", False)},
                "atlassian": {"enabled": config.get("atlassian", {}).get("enabled", False)},
                "gitlab": {"enabled": config.get("gitlab", {}).get("enabled", False)},
                "onec": {"enabled": config.get("onec", {}).get("enabled", False)},
                "active_directory": {"enabled": config.get("active_directory", {}).get("enabled", False)},
                "llm": {"enabled": config.get("llm", {}).get("enabled", False)},
                "redis": {"enabled": config.get("redis", {}).get("enabled", False)}
            },
            llm_providers=config.get("llm", {}).get("providers", {}),
            last_updated=config.get("last_updated"),
            updated_by=config.get("updated_by")
        )
        
        return admin_info
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")

@app.get("/api/admin/config")
async def get_admin_config():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        config = config_manager.get_config()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
        mcp_servers_config = {}
        
        try:
            from mcp_servers import get_discovered_servers, create_server_instance
            
            discovered_servers = get_discovered_servers()
            logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(discovered_servers)}")
            
            for server_name, server_class in discovered_servers.items():
                try:
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
                    server_instance = create_server_instance(server_name)
                    
                    if server_instance:
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
                        admin_settings = server_instance.get_admin_settings()
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
                        server_config = config.get(server_name, {})
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        mcp_servers_config[server_name] = {
                            **admin_settings,
                            'config': server_config
                        }
                        
                        logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    mcp_servers_config[server_name] = {
                        'name': server_name,
                        'display_name': f'{server_name.title()} MCP',
                        'description': f'MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è {server_name}',
                        'icon': 'fas fa-server',
                        'category': 'mcp_servers',
                        'fields': [],
                        'enabled': False,
                        'config': {}
                    }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        return {
            "config": config,
            "mcp_servers": mcp_servers_config
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

@app.post("/api/admin/config/update", response_model=ConfigUpdateResponse)
async def update_config(config_request: ConfigUpdateRequest):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
    try:
        success = config_manager.update_config(
            config_request.section,
            config_request.settings,
            "admin"
        )
        
        if success:
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            reinitialize_system()
            
            return ConfigUpdateResponse(
                success=True,
                message=f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ '{config_request.section}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            )
        else:
            return ConfigUpdateResponse(
                success=False,
                message="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return ConfigUpdateResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/api/admin/config/test", response_model=ConnectionTestResponse)
async def test_connection(test_request: ConnectionTestRequest):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–∏—Å—É"""
    try:
        result = config_manager.test_connection(test_request.service)
        return ConnectionTestResponse(
            success=result["success"],
            message=result["message"]
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return ConnectionTestResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        )

# --- –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ ---

@app.post("/api/analyze-code", response_model=CodeAnalysisResponse)
async def analyze_code(analysis_request: CodeAnalysisRequest, request: Request):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é LLM"""
    try:
        user = await get_user_from_session(request)
        
        analysis_result = await code_analyzer.analyze_code(
            analysis_request.code,
            analysis_request.language,
            analysis_request.analysis_type
        )
        
        return CodeAnalysisResponse(
            success=True,
            message="–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            analysis=analysis_result
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {e}")
        return CodeAnalysisResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {str(e)}"
        )

# --- –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ ---

@app.get("/api/services/status", response_model=HealthResponse)
async def get_services_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        from mcp_servers import get_discovered_servers, create_server_instance
        
        mcp_services = {}
        discovered_servers = get_discovered_servers()
        
        for server_name in discovered_servers.keys():
            try:
                server = create_server_instance(server_name)
                if server:
                    mcp_services[server_name] = {"status": "active" if server.test_connection() else "inactive"}
                else:
                    mcp_services[server_name] = {"status": "inactive"}
            except Exception:
                mcp_services[server_name] = {"status": "inactive"}
        
        services = {
            **mcp_services,
            "llm": {"status": "active" if llm_client.is_connected() else "inactive"},
            "database": {"status": "active"},
            "redis": {"status": "active" if session_manager.is_connected() else "inactive"}
        }
        
        return HealthResponse(
            status="healthy",
            services=services,
            timestamp=datetime.utcnow().isoformat()
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return HealthResponse(
            status="unhealthy",
            services={},
            timestamp=datetime.utcnow().isoformat()
        )

# --- LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã ---

@app.get("/api/llm/providers", response_model=LLMConfigResponse)
async def get_llm_providers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    try:
        config = config_manager.get_service_config('llm')
        providers = config.get('providers', {})
        
        return LLMConfigResponse(
            current_provider=config.get('provider', 'ollama'),
            providers=providers
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {str(e)}")

@app.post("/api/llm/providers/test", response_model=LLMProviderTestResponse)
async def test_llm_provider(test_request: LLMProviderTestRequest):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        provider = LLMProvider.create_provider(
            test_request.provider_name,
            test_request.config
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        test_message = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        response = await provider.generate_response(test_message)
        
        return LLMProviderTestResponse(
            success=True,
            message="–ü—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            test_response=response[:200] + "..." if len(response) > 200 else response
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        return LLMProviderTestResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            test_response=""
        )

# ============================================================================
# –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

def reinitialize_system():
    """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    global llm_client, mcp_client, config_manager
    
    try:
        print("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager = ConfigManager()
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞
        llm_client = LLMClient()
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞
        mcp_client = MCPClient()
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        from mcp_servers import get_discovered_servers, create_server_instance
        
        discovered_servers = get_discovered_servers()
        for server_name in discovered_servers.keys():
            try:
                server = create_server_instance(server_name)
                if server:
                    server.reconnect()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä {server_name}: {e}")
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        ad_auth.reconnect()
        session_manager.reconnect()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

async def get_user_from_session(request: Request) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–µ—Å—Å–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º)"""
    # –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ cookies
    session_id = request.cookies.get('session_id')
    
    if not session_id:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    session_data = session_manager.get_session(session_id)
    if not session_data:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
        )
    
    user_info = session_data.get('user_info')
    if not user_info:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    return user_info

async def process_command(message: str, user_context: dict = None) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MCP –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        response = await mcp_client.process_message(message, user_context)
        return response
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {str(e)}"

# ============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# ============================================================================

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
