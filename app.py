import os
import asyncio
import logging
from fastapi import FastAPI, HTTPException, Request, Depends, status
from fastapi.responses import HTMLResponse, FileResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from dotenv import load_dotenv
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

from mcp_servers.jira_server import JiraMCPServer
from mcp_servers.atlassian_server import AtlassianMCPServer
from mcp_servers.gitlab_server import GitLabMCPServer
from mcp_servers.onec_server import OneCMCPServer
from llm_client import LLMClient
from database import init_database
from chat_service import chat_service
from models import (
    ChatMessage, ChatResponse, ErrorResponse, HealthResponse, ServiceStatus,
    LoginRequest, LoginResponse, UserInfo, LogoutResponse,
    AdminLoginRequest, AdminLoginResponse, AdminPasswordChangeRequest, 
    AdminPasswordChangeResponse, ConfigUpdateRequest, ConfigUpdateResponse,
    ConnectionTestRequest, ConnectionTestResponse, AdminInfo,
    CodeAnalysisRequest, CodeAnalysisResponse,
    LLMConfigRequest, LLMConfigResponse, LLMProviderTestRequest, LLMProviderTestResponse
)
from auth.ad_auth import ADAuthenticator
from auth.session_manager import SessionManager
from auth.middleware import AuthMiddleware
from auth.admin_auth import AdminAuth
from config.config_manager import ConfigManager
from analyzers.code_analyzer import CodeAnalyzer
from mcp_client import mcp_client, MCPClient
from config.llm_config import LLMProvider

def reinitialize_system():
    """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    global llm_client, mcp_client, config_manager
    
    try:
        print("üîÑ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager = ConfigManager()
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        llm_client = LLMClient()
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç
        mcp_client = MCPClient()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        current_provider = llm_client.get_current_provider()
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —Ç–µ–∫—É—â–∏–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {current_provider}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def validate_provider_config(provider_name: str, config: dict) -> dict:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LLM"""
    validated = {}
    
    # –û–±—â–∏–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    validated['enabled'] = bool(config.get('enabled', False))
    validated['temperature'] = max(0.0, min(2.0, float(config.get('temperature', 0.7))))
    validated['max_tokens'] = max(1, min(100000, int(config.get('max_tokens', 4000))))
    validated['timeout'] = max(1, min(300, int(config.get('timeout', 30))))
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if provider_name == 'openai':
        validated['api_key'] = str(config.get('api_key', ''))
        validated['model'] = str(config.get('model', 'gpt-4o-mini'))
        validated['base_url'] = str(config.get('base_url', 'https://api.openai.com/v1'))
    elif provider_name == 'anthropic':
        validated['api_key'] = str(config.get('api_key', ''))
        validated['model'] = str(config.get('model', 'claude-3-5-sonnet-20241022'))
        validated['base_url'] = str(config.get('base_url', 'https://api.anthropic.com'))
    elif provider_name == 'google':
        validated['api_key'] = str(config.get('api_key', ''))
        validated['model'] = str(config.get('model', 'gemini-1.5-flash'))
        validated['base_url'] = str(config.get('base_url', 'https://generativelanguage.googleapis.com'))
    elif provider_name == 'ollama':
        validated['base_url'] = str(config.get('base_url', 'http://localhost:11434'))
        validated['model'] = str(config.get('model', 'llama3.1:8b'))
    elif provider_name == 'local':
        validated['base_url'] = str(config.get('base_url', 'http://localhost:8000'))
        validated['model'] = str(config.get('model', 'local'))
    
    return validated

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å MCP –°–µ—Ä–≤–µ—Ä–∞–º–∏",
    description="–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —á–∞—Ç-–±–æ—Ç–æ–º LLM –∏ MCP —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –¥–ª—è Jira, Atlassian –∏ GitLab",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
def init_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
    global jira_server, atlassian_server, gitlab_server, onec_server, llm_client, ad_auth, session_manager, admin_auth, config_manager, code_analyzer
    
    # MCP —Å–µ—Ä–≤–µ—Ä—ã
    jira_server = JiraMCPServer()
    atlassian_server = AtlassianMCPServer()
    gitlab_server = GitLabMCPServer()
    onec_server = OneCMCPServer()
    
    # LLM –∫–ª–∏–µ–Ω—Ç
    llm_client = LLMClient()
    
    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    ad_auth = ADAuthenticator()
    session_manager = SessionManager()
    admin_auth = AdminAuth()
    config_manager = ConfigManager()
    code_analyzer = CodeAnalyzer()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
init_services()

# –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
app.add_middleware(AuthMiddleware, session_manager=session_manager)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        database_url = config_manager.get_database_url()
        init_database(database_url)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç
        await mcp_client.initialize_servers()
        logger.info("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ MCP —Å–µ—Å—Å–∏–π –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await mcp_client.close_all_sessions()
        logger.info("‚úÖ MCP —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è MCP —Å–µ—Å—Å–∏–π: {e}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
async def get_user_from_session(request: Request) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–µ—Å—Å–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º)"""
    # –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ cookies
    session_id = request.cookies.get('session_id')
    
    if not session_id:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    session_data = session_manager.get_session(session_id)
    if not session_data:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
        )
    
    user_info = session_data.get('user_info')
    if not user_info:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    return user_info

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

@app.get("/", response_class=HTMLResponse)
async def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    with open("templates/index.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.get("/login", response_class=HTMLResponse)
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    with open("templates/login.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.post("/api/auth/login")
async def login(login_data: LoginRequest):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Active Directory –∏–ª–∏ admin"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ admin –ª–∏ —ç—Ç–æ
        if login_data.username.lower() == "admin":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å admin
            if admin_auth.authenticate_admin(login_data.username, login_data.password):
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin
                user_info = {
                    "username": "admin",
                    "display_name": "Administrator",
                    "email": "admin@localhost",
                    "groups": ["admin"],
                    "is_admin": True
                }
                
                # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
                access_token = ad_auth.create_access_token(user_info)
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                session_id = session_manager.create_session(user_info, access_token)
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å cookie
                response = LoginResponse(
                    success=True,
                    message="–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è admin",
                    user_info=user_info
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å session_id
                from fastapi.responses import JSONResponse
                json_response = JSONResponse(
                    content=response.dict(),
                    status_code=200
                )
                json_response.set_cookie(
                    key="session_id",
                    value=session_id,
                    httponly=True,
                    secure=False,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è HTTPS
                    samesite="lax",
                    max_age=24*60*60  # 24 —á–∞—Å–∞
                )
                
                return json_response
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ AD
        user_info = ad_auth.authenticate_user(login_data.username, login_data.password)
        
        if not user_info:
            return LoginResponse(
                success=False,
                message="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Active Directory"
            )
        
        # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
        access_token = ad_auth.create_access_token(user_info)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_id = session_manager.create_session(user_info, access_token)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å cookie
        response = LoginResponse(
            success=True,
            message="–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            user_info=user_info
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å session_id
        from fastapi.responses import JSONResponse
        json_response = JSONResponse(
            content=response.dict(),
            status_code=200
        )
        json_response.set_cookie(
            key="session_id",
            value=session_id,
            httponly=True,
            secure=False,  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è HTTPS
            samesite="lax",
            max_age=24*60*60  # 24 —á–∞—Å–∞
        )
        
        return json_response
    
    except Exception as e:
        return LoginResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/api/auth/logout")
async def logout(request: Request):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session_id = request.cookies.get('session_id')
        if session_id:
            session_manager.delete_session(session_id)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É–¥–∞–ª–µ–Ω–∏–µ–º cookie
        from fastapi.responses import JSONResponse
        response = LogoutResponse(
            success=True,
            message="–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
        )
        
        json_response = JSONResponse(
            content=response.dict(),
            status_code=200
        )
        # –£–¥–∞–ª—è–µ–º cookie
        json_response.delete_cookie(key="session_id")
        
        return json_response
    except Exception as e:
        return LogoutResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {str(e)}"
        )

@app.get("/api/auth/me")
async def get_current_user_info(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_info = await get_user_from_session(request)
        
        return UserInfo(
            username=user_info['username'],
            display_name=user_info['display_name'],
            email=user_info.get('email'),
            groups=user_info.get('groups', [])
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}"
        )

# Admin Panel Endpoints
@app.get("/admin", response_class=HTMLResponse)
async def admin_panel():
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    with open("templates/admin.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.post("/api/admin/login", response_model=AdminLoginResponse)
async def admin_login(login_data: AdminLoginRequest):
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞"""
    try:
        success = admin_auth.authenticate_admin(login_data.username, login_data.password)
        
        if success:
            return AdminLoginResponse(
                success=True,
                message="–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
            )
        else:
            return AdminLoginResponse(
                success=False,
                message="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞"
            )
    except Exception as e:
        return AdminLoginResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/api/admin/change-password", response_model=AdminPasswordChangeResponse)
async def admin_change_password(password_data: AdminPasswordChangeRequest):
    """–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        success = admin_auth.change_admin_password(
            password_data.old_password, 
            password_data.new_password
        )
        
        if success:
            return AdminPasswordChangeResponse(
                success=True,
                message="–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
            )
        else:
            return AdminPasswordChangeResponse(
                success=False,
                message="–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å"
            )
    except Exception as e:
        return AdminPasswordChangeResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {str(e)}"
        )

@app.get("/api/admin/info", response_model=AdminInfo)
async def get_admin_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–µ"""
    return AdminInfo(**admin_auth.get_admin_info())

@app.get("/api/admin/config")
async def get_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return config_manager.get_config()

@app.post("/api/admin/config/update", response_model=ConfigUpdateResponse)
async def update_config(config_data: ConfigUpdateRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        success = config_manager.update_config(
            config_data.section,
            config_data.settings,
            "admin"
        )
        
        if success:
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            reinit_success = reinitialize_system()
            
            if reinit_success:
                return ConfigUpdateResponse(
                    success=True,
                    message=f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ '{config_data.section}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
                )
            else:
                return ConfigUpdateResponse(
                    success=True,
                    message=f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ '{config_data.section}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"
                )
        else:
            return ConfigUpdateResponse(
                success=False,
                message="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            )
    except Exception as e:
        return ConfigUpdateResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"
        )

@app.post("/api/admin/test-connection", response_model=ConnectionTestResponse)
async def test_connection(test_data: ConnectionTestRequest):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É"""
    try:
        result = config_manager.test_connection(test_data.service)
        return ConnectionTestResponse(
            success=result["success"],
            message=result["message"]
        )
    except Exception as e:
        return ConnectionTestResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}"
        )

# Code Analysis Endpoints
@app.post("/api/analyze-code", response_model=CodeAnalysisResponse)
async def analyze_code(analysis_request: CodeAnalysisRequest, request: Request):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –ø–æ –∑–∞–¥–∞—á–µ Jira"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_session(request)
        
        task_key = analysis_request.task_key.strip()
        
        if not task_key:
            return CodeAnalysisResponse(
                success=False,
                message="–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        report = code_analyzer.analyze_task_code(task_key)
        
        if not report:
            return CodeAnalysisResponse(
                success=False,
                message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É {task_key}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º."
            )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = code_analyzer.generate_report_text(report)
        
        return CodeAnalysisResponse(
            success=True,
            message="–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            report=report_text
        )
        
    except Exception as e:
        return CodeAnalysisResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {str(e)}"
        )

@app.post("/api/chat", response_model=ChatResponse)
async def chat(chat_message: ChatMessage, request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç-–±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_session(request)
        user_message = chat_message.message.strip()
        
        if not user_message:
            raise HTTPException(status_code=400, detail="–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = chat_service.get_active_session(db_user.id)
        if not active_session:
            active_session = chat_service.create_chat_session(db_user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message_obj = chat_service.add_message(
            active_session.id, 
            db_user.id, 
            'user', 
            user_message,
            {'ip': request.client.host if request.client else None}
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_context = {
            'user': {
                'username': user.get('username'),
                'display_name': user.get('display_name'),
                'email': user.get('email'),
                'groups': user.get('groups', [])
            },
            'session_id': active_session.id
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π MCP —Å–µ—Ä–≤–µ—Ä
        response = await process_command(user_message, user_context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        assistant_message_obj = chat_service.add_message(
            active_session.id, 
            db_user.id, 
            'assistant', 
            response,
            {'session_id': active_session.id}
        )
        
        return ChatResponse(
            response=response,
            status="success"
        )
    
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, 
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
        )

async def process_command(message: str, user_context: dict = None) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MCP –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        return await mcp_client.process_message_with_llm(message, user_context)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        

@app.get("/api/health", response_model=HealthResponse)
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    llm_status = await llm_client.check_health()
    jira_status = jira_server.check_health()
    atlassian_status = atlassian_server.check_health()
    gitlab_status = gitlab_server.check_health()
    onec_status = onec_server.check_health()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º LDAP —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
    ldap_status = {"status": "disabled", "message": "LDAP –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
    ad_config = config_manager.get_service_config('active_directory')
    if ad_config.get('enabled', False):
        try:
            from mcp_servers.ldap_server import LDAPMCPServer
            ldap_server = LDAPMCPServer()
            ldap_status = ldap_server.check_health()
        except Exception as e:
            ldap_status = {"status": "error", "message": str(e)}
    
    return HealthResponse(
        llm=ServiceStatus(**llm_status),
        jira=ServiceStatus(**jira_status),
        atlassian=ServiceStatus(**atlassian_status),
        gitlab=ServiceStatus(**gitlab_status),
        onec=ServiceStatus(**onec_status),
        ldap=ServiceStatus(**ldap_status)
    )

@app.get("/api/services/status")
async def get_services_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, –∫–∞–∫–∏–µ –≤–∫–ª—é—á–µ–Ω—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤
    jira_config = config_manager.get_service_config('jira')
    atlassian_config = config_manager.get_service_config('atlassian')
    gitlab_config = config_manager.get_service_config('gitlab')
    onec_config = config_manager.get_service_config('onec')
    llm_config = config_manager.get_service_config('llm')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    llm_status = await llm_client.check_health()
    jira_status = jira_server.check_health()
    atlassian_status = atlassian_server.check_health()
    gitlab_status = gitlab_server.check_health()
    onec_status = onec_server.check_health()
    
    # –î–ª—è LLM –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    current_provider = llm_config.get('provider', 'ollama')
    provider_config = llm_config.get('providers', {}).get(current_provider, {})
    llm_enabled = provider_config.get('enabled', False)
    
    return {
        "llm": {
            "enabled": llm_enabled,
            "status": llm_status.get('status', 'unknown')
        },
        "jira": {
            "enabled": jira_config.get('enabled', False),
            "status": jira_status.get('status', 'unknown')
        },
        "atlassian": {
            "enabled": atlassian_config.get('enabled', False),
            "status": atlassian_status.get('status', 'unknown')
        },
        "gitlab": {
            "enabled": gitlab_config.get('enabled', False),
            "status": gitlab_status.get('status', 'unknown')
        },
        "onec": {
            "enabled": onec_config.get('enabled', False),
            "status": onec_status.get('status', 'unknown')
        }
    }

# LLM Provider Management Endpoints

@app.get("/api/llm/providers")
async def get_llm_providers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    try:
        available_providers = llm_client.get_available_providers()
        current_provider = llm_client.get_current_provider()
        
        return {
            "available_providers": [provider.value for provider in available_providers],
            "current_provider": current_provider.value,
            "provider_info": llm_client.get_provider_info()
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
        return {"error": str(e)}

@app.post("/api/llm/switch-provider")
async def switch_llm_provider(provider_data: dict):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    try:
        provider_name = provider_data.get('provider')
        if not provider_name:
            return {"error": "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω"}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ enum
        try:
            provider = LLMProvider(provider_name)
        except ValueError:
            return {"error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}"}
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        llm_client.switch_provider(provider)
        
        return {
            "message": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ {provider_name}",
            "current_provider": provider.value,
            "provider_info": llm_client.get_provider_info()
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        return {"error": str(e)}

@app.get("/api/llm/health")
async def get_llm_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    try:
        health = await llm_client.check_health()
        return health
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM: {e}")
        return {"error": str(e)}

@app.post("/api/llm/test")
async def test_llm_provider(test_data: dict):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    try:
        message = test_data.get('message', '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?')
        response = await llm_client.generate_response(message)
        
        return {
            "message": message,
            "response": response,
            "provider": llm_client.get_current_provider().value
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM: {e}")
        return {"error": str(e)}

# LDAP Management Endpoints

@app.get("/api/ldap/status")
async def get_ldap_status():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å LDAP —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        ad_config = config_manager.get_service_config('active_directory')
        
        if not ad_config.get('enabled', False):
            return {
                "enabled": False,
                "status": "disabled",
                "message": "LDAP –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            }
        
        from mcp_servers.ldap_server import LDAPMCPServer
        ldap_server = LDAPMCPServer()
        health = ldap_server.check_health()
        
        return {
            "enabled": True,
            "status": health.get('status', 'unknown'),
            "message": health.get('message', ''),
            "connection": ldap_server.connection is not None
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ LDAP: {e}")
        return {"error": str(e)}

@app.post("/api/ldap/toggle")
async def toggle_ldap(toggle_data: dict):
    """–í–∫–ª—é—á–∞–µ—Ç/–æ—Ç–∫–ª—é—á–∞–µ—Ç LDAP —Å–µ—Ä–≤–µ—Ä"""
    try:
        enabled = toggle_data.get('enabled', False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        ad_config = config_manager.get_service_config('active_directory')
        ad_config['enabled'] = enabled
        config_manager.update_config('active_directory', ad_config)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await mcp_client.initialize_servers()
        
        return {
            "message": f"LDAP {'–≤–∫–ª—é—á–µ–Ω' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}",
            "enabled": enabled
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è LDAP: {e}")
        return {"error": str(e)}

# LLM Configuration Management Endpoints

@app.get("/api/admin/llm/config", response_model=LLMConfigResponse)
async def get_llm_config():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        llm_config = config_manager.get_service_config('llm')
        
        return LLMConfigResponse(
            success=True,
            message="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –ø–æ–ª—É—á–µ–Ω–∞",
            config=llm_config
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM: {e}")
        return LLMConfigResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/api/admin/llm/config", response_model=LLMConfigResponse)
async def update_llm_config(request: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        llm_config = config_manager.get_service_config('llm')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        llm_config['provider'] = request.get('provider', 'ollama')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if 'providers' in request:
            for provider_name, provider_config in request['providers'].items():
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                validated_config = validate_provider_config(provider_name, provider_config)
                
                if provider_name in llm_config.get('providers', {}):
                    llm_config['providers'][provider_name].update(validated_config)
                else:
                    llm_config['providers'][provider_name] = validated_config
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_manager.update_config('llm', llm_config)
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è LLM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        reinit_success = reinitialize_system()
        
        if reinit_success:
            return LLMConfigResponse(
                success=True,
                message="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞",
                config=llm_config
            )
        else:
            return LLMConfigResponse(
                success=True,
                message="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã",
                config=llm_config
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM: {e}")
        return LLMConfigResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/api/admin/system/reinitialize", response_model=ConfigUpdateResponse)
async def reinitialize_system_endpoint():
    """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤—Ä—É—á–Ω—É—é"""
    try:
        success = reinitialize_system()
        
        if success:
            return ConfigUpdateResponse(
                success=True,
                message="–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
            )
        else:
            return ConfigUpdateResponse(
                success=False,
                message="–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"
            )
    except Exception as e:
        return ConfigUpdateResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}"
        )

@app.post("/api/admin/llm/test", response_model=LLMProviderTestResponse)
async def test_llm_provider(request: LLMProviderTestRequest):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
    try:
        from config.llm_config import LLMProvider
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ enum
        try:
            provider_enum = LLMProvider(request.provider)
        except ValueError:
            return LLMProviderTestResponse(
                success=False,
                message=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {request.provider}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_client = LLMClient(provider_enum)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        health = await test_client.check_health()
        if health['status'] != 'healthy':
            return LLMProviderTestResponse(
                success=False,
                message=f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                provider=request.provider
            )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        response = await test_client.generate_response(request.message)
        
        return LLMProviderTestResponse(
            success=True,
            message="–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            response=response,
            provider=request.provider
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
        return LLMProviderTestResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            provider=request.provider,
            error=str(e)
        )

@app.get("/api/admin/llm/providers")
async def get_available_llm_providers():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    try:
        available_providers = llm_client.get_available_providers()
        current_provider = llm_client.get_current_provider()
        
        return {
            "success": True,
            "available_providers": [provider.value for provider in available_providers],
            "current_provider": current_provider.value,
            "provider_info": llm_client.get_provider_info()
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/docs")
async def api_docs():
    """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"""
    return {"message": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É /docs"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
@app.get("/favicon.ico")
async def favicon():
    return FileResponse("static/favicon.ico")

# API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
@app.get("/api/chat/sessions")
async def get_chat_sessions(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        sessions = chat_service.get_user_sessions(db_user.id)
        
        return {
            "sessions": [
                {
                    "id": session.id,
                    "name": session.session_name,
                    "created_at": session.created_at.isoformat(),
                    "updated_at": session.updated_at.isoformat(),
                    "is_active": session.is_active
                }
                for session in sessions
            ]
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {str(e)}")

@app.get("/api/chat/sessions/{session_id}/history")
async def get_session_history(session_id: int, request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        session = chat_service.get_user_sessions(db_user.id)
        if not any(s.id == session_id for s in session):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        history = chat_service.get_session_history(session_id)
        return {"history": history}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@app.post("/api/chat/sessions/{session_id}/close")
async def close_session(session_id: int, request: Request):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é —á–∞—Ç–∞"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        session = chat_service.get_user_sessions(db_user.id)
        if not any(s.id == session_id for s in session):
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∫ —Å–µ—Å—Å–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        chat_service.close_session(session_id)
        return {"message": "–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {str(e)}")

@app.get("/api/chat/stats")
async def get_user_stats(request: Request):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await get_user_from_session(request)
        db_user = chat_service.get_or_create_user(user.get('username'), user)
        stats = chat_service.get_user_stats(db_user.id)
        return stats
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app:app", 
        host="0.0.0.0", 
        port=5000, 
        reload=True,
        log_level="info"
    )
