#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–ö–∞–∂–¥—ã–π MCP —Å–µ—Ä–≤–µ—Ä –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ LLM —Å—Ä–∞–∑—É
"""

import logging
from typing import Dict, Any, List
from config.config_manager import ConfigManager

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç MCP –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    from mcp import ClientSession, StdioServerParameters
    from mcp.client.stdio import stdio_client
    MCP_AVAILABLE = True
except ImportError:
    MCP_AVAILABLE = False
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤
    ClientSession = Any
    StdioServerParameters = Any
    stdio_client = None

logger = logging.getLogger(__name__)

class MCPClient:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.config_manager = ConfigManager()
        self.sessions: Dict[str, ClientSession] = {}
        self.available_tools: Dict[str, List[Dict]] = {}
        self.server_tools: Dict[str, List[Dict]] = {}
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
        self._cached_servers: Dict[str, Any] = {}
        self._servers_initialized = False
        
        self._load_config()
        self._define_tools()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        self.mcp_config = self.config_manager.get_service_config('mcp_servers')
    
    def _define_tools(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
        enabled_services = self._get_enabled_services()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        all_tools = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        builtin_servers = self._get_builtin_servers()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for server_name, server in builtin_servers.items():
            if server_name in enabled_services:
                try:
                    tools = server.get_tools()
                    if tools:
                        all_tools[server_name] = tools
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç {server_name}: {e}")
        
        self.server_tools = all_tools
    
    def _get_builtin_servers(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if self._servers_initialized and self._cached_servers:
            logger.debug(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {list(self._cached_servers.keys())}")
            return self._cached_servers
        
        servers = {}
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
            from mcp_servers import get_discovered_servers, create_server_instance
            
            discovered_servers = get_discovered_servers()
            logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(discovered_servers)}")
            
            for server_name in discovered_servers.keys():
                try:
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫—ç—à–µ
                    if server_name not in self._cached_servers:
                        server_instance = create_server_instance(server_name)
                        
                        if server_instance:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
                            if server_instance.is_enabled():
                                self._cached_servers[server_name] = server_instance
                                logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä {server_name} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤–∫–ª—é—á–µ–Ω")
                            else:
                                logger.info(f"‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä {server_name} –æ—Ç–∫–ª—é—á–µ–Ω")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞ {server_name}")
                    else:
                        logger.debug(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä {server_name}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if server_name in self._cached_servers:
                        servers[server_name] = self._cached_servers[server_name]
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
            
            # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            self._servers_initialized = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        
        return servers
    
    def invalidate_server_cache(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—ç—à —Å–µ—Ä–≤–µ—Ä–æ–≤ (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)"""
        self._cached_servers.clear()
        self._servers_initialized = False
        logger.info("üîÑ –ö—ç—à —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å–±—Ä–æ—à–µ–Ω")
    
    async def initialize_servers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä–∞–º"""
        try:
            if not MCP_AVAILABLE:
                logger.warning("‚ö†Ô∏è MCP –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            enabled_servers = self._get_enabled_servers_from_config()
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º
            for server_name in enabled_servers:
                try:
                    await self._connect_external_server(server_name)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–µ—Ä—É {server_name}: {e}")
                
            logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.sessions)} –≤–Ω–µ—à–Ω–∏—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MCP —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
    
    def _get_enabled_servers_from_config(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        enabled_servers = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for section_name, section_config in self.mcp_config.items():
            if isinstance(section_config, dict) and section_config.get('enabled', False):
                enabled_servers.append(section_name)
        
        logger.info(f"üîß –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {enabled_servers}")
        return enabled_servers
    
    async def _connect_external_server(self, server_name: str):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É MCP —Å–µ—Ä–≤–µ—Ä—É –ø–æ –∏–º–µ–Ω–∏"""
        try:
            server_config = self.mcp_config.get(server_name, {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á–µ–Ω
            if not server_config.get('enabled', False):
                logger.info(f"‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä {server_name} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            command = server_config.get('command')
            args = server_config.get('args', [])
            
            if not command:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞
            server_params = StdioServerParameters(
                command=command,
                args=args
            )
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            async with stdio_client(server_params) as (read, write):
                async with ClientSession(read, write) as session:
                    await session.initialize()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    tools_result = await session.list_tools()
                    tools = tools_result.tools
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                    self.sessions[server_name] = session
                    self.available_tools[server_name] = tools
                    
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–Ω–µ—à–Ω–µ–º—É —Å–µ—Ä–≤–µ—Ä—É {server_name} —Å {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server_name}: {e}")
            raise
    
    async def get_all_tools(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM"""
        all_tools = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        enabled_services = self._get_enabled_services()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤
        for server_name, tools in self.available_tools.items():
            if server_name in enabled_services:
                for tool in tools:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –∫ –∫–∞–∂–¥–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
                    tool_with_server = tool.copy()
                    tool_with_server['server'] = server_name
                    all_tools.append(tool_with_server)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        builtin_servers = self._get_builtin_servers()
        for server_name, server in builtin_servers.items():
            if server_name in enabled_services:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
                    if self._is_server_available(server_name, server):
                        tools = server.get_tools()
                        for tool in tools:
                            tool_with_server = tool.copy()
                            tool_with_server['server'] = server_name
                            all_tools.append(tool_with_server)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç {server_name}: {e}")
        
        return all_tools
    
    def _is_server_available(self, server_name: str, server: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–∫–ª—é—á–µ–Ω
            if hasattr(server, 'is_enabled') and callable(server.is_enabled):
                if server.is_enabled():
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if hasattr(server, 'test_connection') and callable(server.test_connection):
                        return server.test_connection()  # –£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                    # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º
                    else:
                        logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è")
                        return True
            return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
            return False
    
    async def process_message_with_llm(self, message: str, user_context: dict = None) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LLM –∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ReAct –∞–≥–µ–Ω—Ç–∞
            use_react = user_context.get('use_react', False) if user_context else False
            
            if use_react:
                return await self._process_with_react(message, user_context)
            else:
                return await self._process_with_simple_llm(message, user_context)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def _process_with_react(self, message: str, user_context: dict = None) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ReAct –∞–≥–µ–Ω—Ç–∞"""
        try:
            from react_agent import get_react_agent
            from llm_client import LLMClient
            
            # –ü–æ–ª—É—á–∞–µ–º ReAct –∞–≥–µ–Ω—Ç–∞
            llm_client = LLMClient()
            react_agent = get_react_agent(self, llm_client)
            
            if not react_agent or not react_agent.is_available():
                logger.warning("‚ö†Ô∏è ReAct –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return await self._process_with_simple_llm(message, user_context)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ReAct
            result = await react_agent.process_query(message, user_context)
            
            if result["success"]:
                logger.info(f"‚úÖ ReAct –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–ª {result['iterations']} –∏—Ç–µ—Ä–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {result['tools_used']} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                return result["result"]
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ReAct –∞–≥–µ–Ω—Ç–∞: {result['error']}")
                return f"–û—à–∏–±–∫–∞ ReAct –∞–≥–µ–Ω—Ç–∞: {result['error']}"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ ReAct –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return await self._process_with_simple_llm(message, user_context)
    
    async def _process_with_simple_llm(self, message: str, user_context: dict = None) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ LLM (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            all_tools = await self.get_all_tools()
            
            # –ï—Å–ª–∏ MCP —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            if not self.sessions:
                return await self._handle_with_builtin_servers(message, user_context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            from llm_client import LLMClient
            llm_client = LLMClient()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
            tools_context = {
                "available_tools": all_tools,
                "user_message": message,
                "user_context": user_context or {},
                "chat_history": user_context.get('chat_history', []) if user_context else []
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response = await llm_client.process_with_tools(tools_context)
            return response
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–π LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def _handle_with_builtin_servers(self, message: str, user_context: dict) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            all_tools = await self.get_all_tools()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            from llm_client import LLMClient
            llm_client = LLMClient()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
            tools_context = {
                "available_tools": all_tools,
                "user_message": message,
                "user_context": user_context or {},
                "chat_history": user_context.get('chat_history', []) if user_context else []
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            response = await llm_client.process_with_tools(tools_context)
            return response
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏: {e}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def call_tool_builtin(self, server_name: str, tool_name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
            builtin_servers = self._get_builtin_servers()
            
            if server_name not in builtin_servers:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {server_name}"}
            
            server = builtin_servers[server_name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            if not self._is_server_available(server_name, server):
                return {"error": f"{server_name} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
            
            # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            return server.call_tool(tool_name, arguments)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_name} –Ω–∞ {server_name}: {e}")
            
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            if server_name in builtin_servers:
                server = builtin_servers[server_name]
                if hasattr(server, 'invalidate_connection_cache'):
                    server.invalidate_connection_cache()
            
            return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {str(e)}"}
    
    async def close_all_sessions(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ MCP —Å–µ—Å—Å–∏–∏"""
        for server_name, session in self.sessions.items():
            try:
                await session.close()
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {server_name} –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ {server_name}: {e}")
        
        self.sessions.clear()
        self.available_tools.clear()
    
    def _get_enabled_services(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        enabled_services = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        builtin_servers = self._get_builtin_servers()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
        for server_name, server in builtin_servers.items():
            try:
                if server.is_enabled():
                    enabled_services.append(server_name)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
        
        return enabled_services

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ MCP –∫–ª–∏–µ–Ω—Ç–∞
mcp_client = MCPClient()
